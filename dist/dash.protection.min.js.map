{"version":3,"sources":["webpack://dashjs/webpack/universalModuleDefinition","webpack://dashjs/webpack/bootstrap","webpack://dashjs/./src/streaming/constants/Constants.js","webpack://dashjs/./src/core/Utils.js","webpack://dashjs/./src/core/events/EventsBase.js","webpack://dashjs/./src/core/errors/ErrorsBase.js","webpack://dashjs/./src/streaming/vo/metrics/HTTPRequest.js","webpack://dashjs/./src/streaming/protection/CommonEncryption.js","webpack://dashjs/./src/streaming/protection/vo/MediaCapability.js","webpack://dashjs/./src/streaming/protection/vo/KeySystemConfiguration.js","webpack://dashjs/./src/streaming/protection/errors/ProtectionErrors.js","webpack://dashjs/./src/streaming/protection/vo/LicenseRequest.js","webpack://dashjs/./src/streaming/protection/vo/LicenseResponse.js","webpack://dashjs/./src/streaming/protection/controllers/ProtectionController.js","webpack://dashjs/./src/streaming/protection/vo/KeyPair.js","webpack://dashjs/./src/streaming/protection/vo/ClearKeyKeySet.js","webpack://dashjs/./src/streaming/constants/ProtectionConstants.js","webpack://dashjs/./src/streaming/protection/drm/KeySystemClearKey.js","webpack://dashjs/./src/streaming/protection/drm/KeySystemW3CClearKey.js","webpack://dashjs/./src/streaming/protection/drm/KeySystemWidevine.js","webpack://dashjs/./src/streaming/protection/drm/KeySystemPlayReady.js","webpack://dashjs/./src/streaming/protection/servers/DRMToday.js","webpack://dashjs/./src/streaming/protection/servers/PlayReady.js","webpack://dashjs/./src/streaming/protection/servers/Widevine.js","webpack://dashjs/./src/streaming/protection/servers/ClearKey.js","webpack://dashjs/./src/streaming/protection/controllers/ProtectionKeyController.js","webpack://dashjs/./src/streaming/protection/ProtectionEvents.js","webpack://dashjs/./src/streaming/protection/vo/NeedKey.js","webpack://dashjs/./src/streaming/protection/vo/KeyMessage.js","webpack://dashjs/./src/streaming/protection/vo/KeySystemAccess.js","webpack://dashjs/./src/streaming/protection/models/ProtectionModel_21Jan2015.js","webpack://dashjs/./src/streaming/protection/models/ProtectionModel_3Feb2014.js","webpack://dashjs/./src/streaming/protection/models/ProtectionModel_01b.js","webpack://dashjs/./src/streaming/protection/Protection.js","webpack://dashjs/./src/streaming/vo/DashJSError.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","constants","this","init","STREAM","VIDEO","AUDIO","TEXT","MUXED","IMAGE","STPP","TTML","VTT","WVTT","ABR_STRATEGY_DYNAMIC","ABR_STRATEGY_BOLA","ABR_STRATEGY_L2A","ABR_STRATEGY_LoLP","ABR_STRATEGY_THROUGHPUT","ABR_FETCH_THROUGHPUT_CALCULATION_DOWNLOADED_DATA","ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING","ABR_FETCH_THROUGHPUT_CALCULATION_AAST","LIVE_CATCHUP_MODE_DEFAULT","LIVE_CATCHUP_MODE_LOLP","MOVING_AVERAGE_SLIDING_WINDOW","MOVING_AVERAGE_EWMA","BAD_ARGUMENT_ERROR","MISSING_CONFIG_ERROR","TRACK_SWITCH_MODE_ALWAYS_REPLACE","TRACK_SWITCH_MODE_NEVER_REPLACE","TRACK_SELECTION_MODE_FIRST_TRACK","TRACK_SELECTION_MODE_HIGHEST_BITRATE","TRACK_SELECTION_MODE_HIGHEST_EFFICIENCY","TRACK_SELECTION_MODE_WIDEST_RANGE","CMCD_MODE_QUERY","CMCD_MODE_HEADER","LOCATION","INITIALIZE","TEXT_SHOWING","TEXT_HIDDEN","CC1","CC3","UTF8","SCHEME_ID_URI","START_TIME","SERVICE_DESCRIPTION_LL_SCHEME","SUPPLEMENTAL_PROPERTY_LL_SCHEME","XML","ARRAY_BUFFER","DVB_REPORTING_URL","DVB_PROBABILITY","VIDEO_ELEMENT_READY_STATES","HAVE_NOTHING","HAVE_METADATA","HAVE_CURRENT_DATA","HAVE_FUTURE_DATA","HAVE_ENOUGH_DATA","Utils","dest","source","copy","empty","mixin","src","Array","length","push","clone","url","params","modifiedUrl","URL","forEach","param","searchParams","set","href","e","headerStr","headers","headerPairs","trim","split","ilen","headerPair","index","indexOf","substring","dt","Date","getTime","replace","Math","random","floor","toString","string","hash","charCodeAt","EventsBase","events","config","override","publicOnly","evt","ErrorsBase","errors","err","HTTPRequest","tcpid","type","actualurl","range","trequest","tresponse","responsecode","interval","trace","_stream","_tfinish","_mediaduration","_quality","_responseHeaders","_serviceLocation","HTTPRequestTrace","b","GET","HEAD","MPD_TYPE","XLINK_EXPANSION_TYPE","INIT_SEGMENT_TYPE","INDEX_SEGMENT_TYPE","MEDIA_SEGMENT_TYPE","BITSTREAM_SWITCHING_SEGMENT_TYPE","MSS_FRAGMENT_INFO_SEGMENT_TYPE","LICENSE","OTHER_TYPE","CommonEncryption","cpArray","retVal","cp","schemeIdUri","toLowerCase","pssh","offset","view","DataView","version","getUint8","getUint32","slice","keySystem","initData","psshList","parsePSSHList","uuid","cpData","BASE64","__text","decodeArray","buffer","data","dv","byteCursor","nextBox","systemID","boxStart","byteLength","val","MediaCapability","contentType","robustness","KeySystemConfiguration","audioCapabilities","videoCapabilities","distinctiveIdentifier","persistentState","sessionTypes","initDataTypes","protectionErrors","MEDIA_KEYERR_CODE","MEDIA_KEYERR_UNKNOWN_CODE","MEDIA_KEYERR_CLIENT_CODE","MEDIA_KEYERR_SERVICE_CODE","MEDIA_KEYERR_OUTPUT_CODE","MEDIA_KEYERR_HARDWARECHANGE_CODE","MEDIA_KEYERR_DOMAIN_CODE","MEDIA_KEY_MESSAGE_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE","SERVER_CERTIFICATE_UPDATED_ERROR_CODE","KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE","KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE","KEY_SESSION_CREATED_ERROR_CODE","MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE","MEDIA_KEYERR_UNKNOWN_MESSAGE","MEDIA_KEYERR_CLIENT_MESSAGE","MEDIA_KEYERR_SERVICE_MESSAGE","MEDIA_KEYERR_OUTPUT_MESSAGE","MEDIA_KEYERR_HARDWARECHANGE_MESSAGE","MEDIA_KEYERR_DOMAIN_MESSAGE","MEDIA_KEY_MESSAGE_ERROR_MESSAGE","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE","SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE","KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE","KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE","KEY_SESSION_CREATED_ERROR_MESSAGE","MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE","LicenseRequest","method","responseType","withCredentials","messageType","sessionId","LicenseResponse","ProtectionController","instance","logger","pendingNeedKeyData","mediaInfoArr","protDataSet","sessionType","robustnessLevel","licenseRequestFilters","licenseResponseFilters","protectionKeyController","protectionModel","eventBus","debug","needkeyRetries","cmcdModel","settings","checkConfig","Error","createKeySession","cdmData","initDataForKS","getPSSHForKeySystem","protData","getProtData","_isInitDataDuplicate","getSessionType","error","trigger","KEY_SESSION_CREATED","DashJSError","ProtectionErrors","message","systemString","currentInitData","getAllInitData","initDataEquals","loadKeySession","sessionID","setMediaElement","element","on","NEED_KEY","onNeedKey","off","keySystemString","getKeySystemConfiguration","audioRobustness","videoRobustness","ksSessionType","media","codec","selectKeySystem","supportedKS","fromManifest","sort","ksA","ksB","ks","priority","undefined","ksIdx","keySystemAccess","self","requestedKeySystems","configs","onKeySystemAccessComplete","event","KEY_SYSTEM_ACCESS_COMPLETE","INTERNAL_KEY_SYSTEM_SELECTED","onKeySystemSelected","KEY_SYSTEM_SELECTED","info","getKeySystem","serverCertificate","setServerCertificate","isClearKey","kids","keys","clearkeys","TextEncoder","encode","JSON","stringify","requestKeySystemAccess","_selectInitialKeySystem","findIndex","entry","_selectWithExistingKeySystem","sendLicenseRequestCompleteEvent","LICENSE_REQUEST_COMPLETE","onKeyStatusChanged","KEY_STATUSES_CHANGED","status","onKeyMessage","keyMessage","KEY_MESSAGE","sessionToken","licenseServerData","getLicenseServer","eventData","getSessionID","processClearKeyLicenseRequest","updateKeySession","serverURL","laURL","getLicenseServerUrlFromMediaInfo","psshData","getPSSHData","getLicenseServerURLFromInitData","getServerURLFromMessage","reqHeaders","updateHeaders","httpRequestHeaders","getRequestHeadersFromMessage","reportError","xhr","errorMsg","response","getErrorResponse","statusText","readyState","onLoad","licenseResponse","responseURL","parseHttpHeaders","getAllResponseHeaders","applyFilters","then","licenseMessage","getLicenseMessage","onAbort","onError","reqPayload","getLicenseRequestFromMessage","reqMethod","getHTTPMethod","getResponseType","timeout","isNaN","httpTimeout","licenseRequest","retryAttempts","streaming","doLicenseRequest","request","retriesCount","XMLHttpRequest","cmcd","enabled","Constants","cmcdParams","getQueryParameter","addAditionalQueryParameterToUrl","open","setRequestHeader","cmcdHeaders","getHeaderParameters","header","retryRequest","retryInterval","retryIntervals","setTimeout","onload","warn","ontimeout","onerror","onabort","LICENSE_REQUEST_SENDING","payload","send","retry","initDataType","abInitData","ArrayBuffer","isView","String","fromCharCode","apply","Uint8Array","getSupportedKeySystems","filters","reduce","prev","next","Promise","resolve","initializeForMedia","mediaInfo","INTERNAL_KEY_MESSAGE","INTERNAL_KEY_STATUS_CHANGED","getSupportedKeySystemsFromContentProtection","contentProtection","clearMediaInfoArrayByStreamId","streamId","filter","streamInfo","id","removeKeySession","closeKeySession","setSessionType","setRobustnessLevel","level","setProtectionData","cps","getKeySystems","setKeySystems","keySystems","setLicenseRequestFilters","setLicenseResponseFilters","stop","reset","retryTimeout","clearTimeout","getLogger","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory","KeyPair","keyID","ClearKeyKeySet","keyPairs","numKeys","jwk","kty","alg","kid","k","jwkString","len","buf","bView","CLEARKEY_KEYSTEM_STRING","WIDEVINE_KEYSTEM_STRING","PLAYREADY_KEYSTEM_STRING","ProtectionConstants","schemeIdURI","KeySystemClearKey","LICENSE_SERVER_MANIFEST_CONFIGURATIONS","attributes","prefixes","getInitData","cencContentProtection","parseInitDataFromContentProtection","cencDefaultKid","btoa","match","map","a","parseInt","join","cencDefaultKidToBase64Representation","parse","getCDMData","getSessionId","licenseServer","clearkeyProtData","j","ckData","attribute","prefix","__prefix","getClearKeysFromProtectionData","protectionData","clearkeySet","jsonMsg","clearkeyID","clearkey","getSingletonFactory","KeySystemW3CClearKey","KeySystemWidevine","KeySystemPlayReady","messageFormat","PROSize","PSSHSize","PSSHBoxBuffer","PSSHBox","PSSHData","PSSHBoxType","playreadySystemID","uint8arraydecodedPROHeader","pro","prheader","setUint32","msg","xmlDoc","parser","DOMParser","dataview","Uint16Array","headerNameList","parseFromString","getElementsByTagName","headerValueList","childNodes","nodeValue","Content","Challenge","decode","numRecords","getUint16","recordType","recordLength","recordData","record","laurl","luiurl","customData","cdmDataBytes","setPlayReadyMessageFormat","format","DRMToday","license","keySystemStr","serverResponse","PlayReady","soap","uintToString","arrayBuffer","encodedString","decodeURIComponent","escape","parseServerResponse","stringResponse","envelope","getElementsByTagNameNS","body","parseErrorResponse","faultstring","statusCode","idStart","idEnd","fault","detail","exception","node","firstChild","lastIndexOf","errorString","Widevine","ClearKey","keypair","keyid","ProtectionKeyController","clearkeyKeySystem","clearkeyW3CKeySystem","context","initialize","getInstance","protectionDataSet","initData1","initData2","data1","data2","newKeySystems","getKeySystemBySystemString","cpIdx","findCencContentProtection","shouldNotFilterOutKeySystem","setConfig","protectionEvents","KEY_ADDED","KEY_ERROR","KEY_SESSION_CLOSED","KEY_SESSION_REMOVED","PROTECTION_CREATED","PROTECTION_DESTROYED","SERVER_CERTIFICATE_UPDATED","TEARDOWN_COMPLETE","VIDEO_ELEMENT_SELECTED","KEY_SESSION_UPDATED","NeedKey","KeyMessage","defaultURL","KeySystemAccess","ksConfiguration","ProtectionModel_21Jan2015","videoElement","mediaKeys","sessions","eventHandler","closeKeySessionInternal","session","removeEventListener","close","removeSession","token","splice","parseKeyStatus","args","keyId","createSessionToken","handleEvent","target","keyStatuses","keyStatus","arguments","getExpirationTime","expiration","getKeyStatuses","getUsable","usable","addEventListener","closed","ksConfigurations","requestKeySystemAccessInternal","idx","navigator","requestMediaKeySystemAccess","mediaKeySystemAccess","configuration","getConfiguration","mksa","createMediaKeys","mkeys","setMediaKeys","mediaElement","createSession","dataType","generateRequest","toJWK","update","load","success","remove","numSessions","done","ProtectionModel_3Feb2014","api","needkey","ready","release","boundDoSetKeys","doSetKeys","found","supportedAudio","supportedVideo","configIdx","audios","videos","audioIdx","MediaKeys","isTypeSupported","videoIdx","ksConfig","ksAccess","capabilities","keySession","NaN","destinationURL","ProtectionModel_01b","pendingSessions","moreSessionsAllowed","errHandler","removeEventListeners","cancelKeyRequest","findSessionByID","sessionArray","keyerror","keymessage","keyadded","ve","document","createElement","canPlayType","newSession","generateKeyRequest","addKey","code","errorCode","systemCode","shift","APIS_ProtectionModel_01b","APIS_ProtectionModel_3Feb2014","Protection","getAPI","apis","createProtectionSystem","controller","videoModel","getElement","onencrypted","getProtectionModel","setEncryptedMediaSupported","ProtectionEvents","updateClassFactory"],"mappings":"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","file":"dash.protection.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"dashjs\"] = factory();\n\telse\n\t\troot[\"dashjs\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 70);\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Constants declaration\r\n * @class\r\n * @ignore\r\n * @hideconstructor\r\n */\r\nclass Constants {\r\n\r\n    init() {\r\n        /**\r\n         *  @constant {string} STREAM Stream media type. Mainly used to report metrics relative to the full stream\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.STREAM = 'stream';\r\n\r\n        /**\r\n         *  @constant {string} VIDEO Video media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.VIDEO = 'video';\r\n\r\n        /**\r\n         *  @constant {string} AUDIO Audio media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.AUDIO = 'audio';\r\n\r\n        /**\r\n         *  @constant {string} TEXT Text media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TEXT = 'text';\r\n\r\n        /**\r\n         *  @constant {string} MUXED Muxed (video/audio in the same chunk) media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.MUXED = 'muxed';\r\n\r\n        /**\r\n         *  @constant {string} IMAGE Image media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.IMAGE = 'image';\r\n\r\n        /**\r\n         *  @constant {string} STPP STTP Subtitles format\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.STPP = 'stpp';\r\n\r\n        /**\r\n         *  @constant {string} TTML STTP Subtitles format\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TTML = 'ttml';\r\n\r\n        /**\r\n         *  @constant {string} VTT STTP Subtitles format\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.VTT = 'vtt';\r\n\r\n        /**\r\n         *  @constant {string} WVTT STTP Subtitles format\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.WVTT = 'wvtt';\r\n\r\n        /**\r\n         *  @constant {string} ABR_STRATEGY_DYNAMIC Dynamic Adaptive bitrate algorithm\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_STRATEGY_DYNAMIC = 'abrDynamic';\r\n\r\n        /**\r\n         *  @constant {string} ABR_STRATEGY_BOLA Adaptive bitrate algorithm based on Bola (buffer level)\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_STRATEGY_BOLA = 'abrBola';\r\n\r\n        /**\r\n         *  @constant {string} ABR_STRATEGY_L2A Adaptive bitrate algorithm based on L2A (online learning)\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_STRATEGY_L2A = 'abrL2A';\r\n\r\n        /**\r\n         *  @constant {string} ABR_STRATEGY_LoLP Adaptive bitrate algorithm based on LoL+\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_STRATEGY_LoLP = 'abrLoLP';\r\n\r\n        /**\r\n         *  @constant {string} ABR_STRATEGY_THROUGHPUT Adaptive bitrate algorithm based on throughput\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_STRATEGY_THROUGHPUT = 'abrThroughput';\r\n\r\n        /**\r\n         *  @constant {string} ABR_FETCH_THROUGHPUT_CALUCUALTION_DOWNLOADED_DATA Throughput calculation based on downloaded data array\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_FETCH_THROUGHPUT_CALCULATION_DOWNLOADED_DATA = 'abrFetchThroughputCalculationDownloadedData';\r\n\r\n        /**\r\n         *  @constant {string} ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING Throughput calculation based on moof parsing\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING = 'abrFetchThroughputCalculationMoofParsing';\r\n\r\n        /**\r\n        *  @constant {string} ABR_FETCH_THROUGHPUT_CALCULATION_AAST Throughput calculation based on adjusted availability start time in low latency mode\r\n        *  @memberof Constants#\r\n        *  @static\r\n        */\r\n        this.ABR_FETCH_THROUGHPUT_CALCULATION_AAST = 'abrFetchThroughputCalculationAAST';\r\n\r\n        /**\r\n         *  @constant {string} LIVE_CATCHUP_MODE_DEFAULT Throughput calculation based on moof parsing\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.LIVE_CATCHUP_MODE_DEFAULT = 'liveCatchupModeDefault';\r\n\r\n        /**\r\n         *  @constant {string} LIVE_CATCHUP_MODE_LOLP Throughput calculation based on moof parsing\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.LIVE_CATCHUP_MODE_LOLP = 'liveCatchupModeLoLP';\r\n\r\n        /**\r\n         *  @constant {string} MOVING_AVERAGE_SLIDING_WINDOW Moving average sliding window\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.MOVING_AVERAGE_SLIDING_WINDOW = 'slidingWindow';\r\n\r\n        /**\r\n         *  @constant {string} EWMA Exponential moving average\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.MOVING_AVERAGE_EWMA = 'ewma';\r\n\r\n        /**\r\n         *  @constant {string} BAD_ARGUMENT_ERROR Invalid Arguments type of error\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.BAD_ARGUMENT_ERROR = 'Invalid Arguments';\r\n\r\n        /**\r\n         *  @constant {string} MISSING_CONFIG_ERROR Missing configuration parameters type of error\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.MISSING_CONFIG_ERROR = 'Missing config parameter(s)';\r\n\r\n        /**\r\n         *  @constant {string} TRACK_SWITCH_MODE_ALWAYS_REPLACE used to clear the buffered data (prior to current playback position) after track switch. Default for audio\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TRACK_SWITCH_MODE_ALWAYS_REPLACE = 'alwaysReplace';\r\n\r\n        /**\r\n         *  @constant {string} TRACK_SWITCH_MODE_NEVER_REPLACE used to forbid clearing the buffered data (prior to current playback position) after track switch. Defers to fastSwitchEnabled for placement of new data. Default for video\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TRACK_SWITCH_MODE_NEVER_REPLACE = 'neverReplace';\r\n\r\n        /**\r\n         *  @constant {string} TRACK_SELECTION_MODE_FIRST_TRACK makes the player select the first track found in the manifest.\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TRACK_SELECTION_MODE_FIRST_TRACK = 'firstTrack';\r\n\r\n        /**\r\n         *  @constant {string} TRACK_SELECTION_MODE_HIGHEST_BITRATE makes the player select the track with a highest bitrate. This mode is a default mode.\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TRACK_SELECTION_MODE_HIGHEST_BITRATE = 'highestBitrate';\r\n\r\n        /**\r\n         *  @constant {string} TRACK_SELECTION_MODE_HIGHEST_EFFICIENCY makes the player select the track with the lowest bitrate per pixel average.\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TRACK_SELECTION_MODE_HIGHEST_EFFICIENCY = 'highestEfficiency';\r\n\r\n        /**\r\n         *  @constant {string} TRACK_SELECTION_MODE_WIDEST_RANGE makes the player select the track with a widest range of bitrates.\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TRACK_SELECTION_MODE_WIDEST_RANGE = 'widestRange';\r\n\r\n        /**\r\n         *  @constant {string} CMCD_MODE_QUERY specifies to attach CMCD metrics as query parameters.\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.CMCD_MODE_QUERY = 'query';\r\n\r\n        /**\r\n         *  @constant {string} CMCD_MODE_HEADER specifies to attach CMCD metrics as HTTP headers.\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.CMCD_MODE_HEADER = 'header';\r\n\r\n\r\n        this.LOCATION = 'Location';\r\n        this.INITIALIZE = 'initialize';\r\n        this.TEXT_SHOWING = 'showing';\r\n        this.TEXT_HIDDEN = 'hidden';\r\n        this.CC1 = 'CC1';\r\n        this.CC3 = 'CC3';\r\n        this.UTF8 = 'utf-8';\r\n        this.SCHEME_ID_URI = 'schemeIdUri';\r\n        this.START_TIME = 'starttime';\r\n        this.SERVICE_DESCRIPTION_LL_SCHEME = 'urn:dvb:dash:lowlatency:scope:2019';\r\n        this.SUPPLEMENTAL_PROPERTY_LL_SCHEME = 'urn:dvb:dash:lowlatency:critical:2019';\r\n        this.XML = 'XML';\r\n        this.ARRAY_BUFFER = 'ArrayBuffer';\r\n        this.DVB_REPORTING_URL = 'dvb:reportingUrl';\r\n        this.DVB_PROBABILITY = 'dvb:probability';\r\n        this.VIDEO_ELEMENT_READY_STATES = {\r\n            HAVE_NOTHING: 0,\r\n            HAVE_METADATA: 1,\r\n            HAVE_CURRENT_DATA: 2,\r\n            HAVE_FUTURE_DATA: 3,\r\n            HAVE_ENOUGH_DATA: 4\r\n        };\r\n    }\r\n\r\n    constructor() {\r\n        this.init();\r\n    }\r\n}\r\n\r\nconst constants = new Constants();\r\nexport default constants;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\n\r\nclass Utils {\r\n    static mixin(dest, source, copy) {\r\n        let s;\r\n        let empty = {};\r\n        if (dest) {\r\n            for (let name in source) {\r\n                if (source.hasOwnProperty(name)) {\r\n                    s = source[name];\r\n                    if (!(name in dest) || (dest[name] !== s && (!(name in empty) || empty[name] !== s))) {\r\n                        if (typeof dest[name] === 'object' && dest[name] !== null) {\r\n                            dest[name] = Utils.mixin(dest[name], s, copy);\r\n                        } else {\r\n                            dest[name] = copy(s);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return dest;\r\n    }\r\n\r\n    static clone(src) {\r\n        if (!src || typeof src !== 'object') {\r\n            return src; // anything\r\n        }\r\n        let r;\r\n        if (src instanceof Array) {\r\n            // array\r\n            r = [];\r\n            for (let i = 0, l = src.length; i < l; ++i) {\r\n                if (i in src) {\r\n                    r.push(Utils.clone(src[i]));\r\n                }\r\n            }\r\n        } else {\r\n            r = {};\r\n        }\r\n        return Utils.mixin(r, src, Utils.clone);\r\n    }\r\n\r\n    static addAditionalQueryParameterToUrl(url, params) {\r\n        try {\r\n            if (!params || params.length === 0) {\r\n                return url;\r\n            }\r\n\r\n            let modifiedUrl = new URL(url);\r\n\r\n            params.forEach((param) => {\r\n                if (param.key && param.value) {\r\n                    modifiedUrl.searchParams.set(param.key, param.value);\r\n                }\r\n            });\r\n\r\n            return modifiedUrl.href;\r\n\r\n\r\n        } catch (e) {\r\n            return url;\r\n        }\r\n    }\r\n\r\n    static parseHttpHeaders (headerStr) {\r\n        let headers = {};\r\n        if (!headerStr) {\r\n            return headers;\r\n        }\r\n\r\n        // Trim headerStr to fix a MS Edge bug with xhr.getAllResponseHeaders method\r\n        // which send a string starting with a \"\\n\" character\r\n        let headerPairs = headerStr.trim().split('\\u000d\\u000a');\r\n        for (let i = 0, ilen = headerPairs.length; i < ilen; i++) {\r\n            let headerPair = headerPairs[i];\r\n            let index = headerPair.indexOf('\\u003a\\u0020');\r\n            if (index > 0) {\r\n                headers[headerPair.substring(0, index)] = headerPair.substring(index + 2);\r\n            }\r\n        }\r\n        return headers;\r\n    }\r\n\r\n    static generateUuid() {\r\n        let dt = new Date().getTime();\r\n        const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            const r = (dt + Math.random() * 16) % 16 | 0;\r\n            dt = Math.floor(dt / 16);\r\n            return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n        });\r\n        return uuid;\r\n    }\r\n\r\n    static generateHashCode(string) {\r\n        let hash = 0;\r\n\r\n        if (string.length === 0) {\r\n            return hash;\r\n        }\r\n\r\n        for (let i = 0; i < string.length; i++) {\r\n            const chr = string.charCodeAt(i);\r\n            hash = ((hash << 5) - hash) + chr;\r\n            hash |= 0;\r\n        }\r\n        return hash;\r\n    }\r\n}\r\n\r\nexport default Utils;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass EventsBase {\r\n    extend (events, config) {\r\n        if (!events) return;\r\n\r\n        let override = config ? config.override : false;\r\n        let publicOnly = config ? config.publicOnly : false;\r\n\r\n\r\n        for (const evt in events) {\r\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\r\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\r\n            this[evt] = events[evt];\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default EventsBase;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass ErrorsBase {\r\n    extend (errors, config) {\r\n        if (!errors) return;\r\n\r\n        let override = config ? config.override : false;\r\n        let publicOnly = config ? config.publicOnly : false;\r\n\r\n\r\n        for (const err in errors) {\r\n            if (!errors.hasOwnProperty(err) || (this[err] && !override)) continue;\r\n            if (publicOnly && errors[err].indexOf('public_') === -1) continue;\r\n            this[err] = errors[err];\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorsBase;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc This Object holds reference to the HTTPRequest for manifest, fragment and xlink loading.\r\n * Members which are not defined in ISO23009-1 Annex D should be prefixed by a _ so that they are ignored\r\n * by Metrics Reporting code.\r\n * @ignore\r\n */\r\nclass HTTPRequest {\r\n    /**\r\n     * @class\r\n     */\r\n    constructor() {\r\n        /**\r\n         * Identifier of the TCP connection on which the HTTP request was sent.\r\n         * @public\r\n         */\r\n        this.tcpid = null;\r\n        /**\r\n         * This is an optional parameter and should not be included in HTTP request/response transactions for progressive download.\r\n         * The type of the request:\r\n         * - MPD\r\n         * - XLink expansion\r\n         * - Initialization Fragment\r\n         * - Index Fragment\r\n         * - Media Fragment\r\n         * - Bitstream Switching Fragment\r\n         * - other\r\n         * @public\r\n         */\r\n        this.type = null;\r\n        /**\r\n         * The original URL (before any redirects or failures)\r\n         * @public\r\n         */\r\n        this.url = null;\r\n        /**\r\n         * The actual URL requested, if different from above\r\n         * @public\r\n         */\r\n        this.actualurl = null;\r\n        /**\r\n         * The contents of the byte-range-spec part of the HTTP Range header.\r\n         * @public\r\n         */\r\n        this.range = null;\r\n        /**\r\n         * Real-Time | The real time at which the request was sent.\r\n         * @public\r\n         */\r\n        this.trequest = null;\r\n        /**\r\n         * Real-Time | The real time at which the first byte of the response was received.\r\n         * @public\r\n         */\r\n        this.tresponse = null;\r\n        /**\r\n         * The HTTP response code.\r\n         * @public\r\n         */\r\n        this.responsecode = null;\r\n        /**\r\n         * The duration of the throughput trace intervals (ms), for successful requests only.\r\n         * @public\r\n         */\r\n        this.interval = null;\r\n        /**\r\n         * Throughput traces, for successful requests only.\r\n         * @public\r\n         */\r\n        this.trace = [];\r\n\r\n        /**\r\n         * Type of stream (\"audio\" | \"video\" etc..)\r\n         * @public\r\n         */\r\n        this._stream = null;\r\n        /**\r\n         * Real-Time | The real time at which the request finished.\r\n         * @public\r\n         */\r\n        this._tfinish = null;\r\n        /**\r\n         * The duration of the media requests, if available, in seconds.\r\n         * @public\r\n         */\r\n        this._mediaduration = null;\r\n        /**\r\n         * The media segment quality\r\n         * @public\r\n         */\r\n        this._quality = null;\r\n        /**\r\n         * all the response headers from request.\r\n         * @public\r\n         */\r\n        this._responseHeaders = null;\r\n        /**\r\n         * The selected service location for the request. string.\r\n         * @public\r\n         */\r\n        this._serviceLocation = null;\r\n    }\r\n}\r\n\r\n/**\r\n * @classdesc This Object holds reference to the progress of the HTTPRequest.\r\n * @ignore\r\n */\r\nclass HTTPRequestTrace {\r\n    /**\r\n    * @class\r\n    */\r\n    constructor() {\r\n        /**\r\n         * Real-Time | Measurement stream start.\r\n         * @public\r\n         */\r\n        this.s = null;\r\n        /**\r\n         * Measurement stream duration (ms).\r\n         * @public\r\n         */\r\n        this.d = null;\r\n        /**\r\n         * List of integers counting the bytes received in each trace interval within the measurement stream.\r\n         * @public\r\n         */\r\n        this.b = [];\r\n        /**\r\n         * Measurement throughput in kbits/s\r\n         * @public\r\n         */\r\n         this.t = null;\r\n    }\r\n}\r\n\r\nHTTPRequest.GET = 'GET';\r\nHTTPRequest.HEAD = 'HEAD';\r\nHTTPRequest.MPD_TYPE = 'MPD';\r\nHTTPRequest.XLINK_EXPANSION_TYPE = 'XLinkExpansion';\r\nHTTPRequest.INIT_SEGMENT_TYPE = 'InitializationSegment';\r\nHTTPRequest.INDEX_SEGMENT_TYPE = 'IndexSegment';\r\nHTTPRequest.MEDIA_SEGMENT_TYPE = 'MediaSegment';\r\nHTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE = 'BitstreamSwitchingSegment';\r\nHTTPRequest.MSS_FRAGMENT_INFO_SEGMENT_TYPE = 'FragmentInfoSegment';\r\nHTTPRequest.LICENSE = 'license';\r\nHTTPRequest.OTHER_TYPE = 'other';\r\n\r\nexport { HTTPRequest, HTTPRequestTrace };\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass CommonEncryption {\r\n    /**\r\n     * Find and return the ContentProtection element in the given array\r\n     * that indicates support for MPEG Common Encryption\r\n     *\r\n     * @param {Array} cpArray array of content protection elements\r\n     * @returns {Object|null} the Common Encryption content protection element or\r\n     * null if one was not found\r\n     */\r\n    static findCencContentProtection(cpArray) {\r\n        let retVal = null;\r\n        for (let i = 0; i < cpArray.length; ++i) {\r\n            let cp = cpArray[i];\r\n            if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' &&\r\n                (cp.value.toLowerCase() === 'cenc' || cp.value.toLowerCase() === 'cbcs'))\r\n                retVal = cp;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Returns just the data portion of a single PSSH\r\n     *\r\n     * @param {ArrayBuffer} pssh - the PSSH\r\n     * @return {ArrayBuffer} data portion of the PSSH\r\n     */\r\n    static getPSSHData(pssh) {\r\n        let offset = 8; // Box size and type fields\r\n        let view = new DataView(pssh);\r\n\r\n        // Read version\r\n        let version = view.getUint8(offset);\r\n\r\n        offset += 20; // Version (1), flags (3), system ID (16)\r\n\r\n        if (version > 0) {\r\n            offset += 4 + (16 * view.getUint32(offset)); // Key ID count (4) and All key IDs (16*count)\r\n        }\r\n\r\n        offset += 4; // Data size\r\n        return pssh.slice(offset);\r\n    }\r\n\r\n    /**\r\n     * Returns the PSSH associated with the given key system from the concatenated\r\n     * list of PSSH boxes in the given initData\r\n     *\r\n     * @param {KeySystem} keySystem the desired\r\n     * key system\r\n     * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\r\n     * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found\r\n     * or null if a valid association could not be found.\r\n     */\r\n    static getPSSHForKeySystem(keySystem, initData) {\r\n        let psshList = CommonEncryption.parsePSSHList(initData);\r\n        if (keySystem && psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\r\n            return psshList[keySystem.uuid.toLowerCase()];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parse a standard common encryption PSSH which contains a simple\r\n     * base64-encoding of the init data\r\n     *\r\n     * @param {Object} cpData the ContentProtection element\r\n     * @param {BASE64} BASE64 reference\r\n     * @returns {ArrayBuffer|null} the init data or null if not found\r\n     */\r\n    static parseInitDataFromContentProtection(cpData, BASE64) {\r\n        if ('pssh' in cpData) {\r\n\r\n            // Remove whitespaces and newlines from pssh text\r\n            cpData.pssh.__text = cpData.pssh.__text.replace(/\\r?\\n|\\r/g, '').replace(/\\s+/g, '');\r\n\r\n            return BASE64.decodeArray(cpData.pssh.__text).buffer;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parses list of PSSH boxes into keysystem-specific PSSH data\r\n     *\r\n     * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by\r\n     * CDM as initialization data when CommonEncryption content is detected\r\n     * @returns {Object|Array} an object that has a property named according to each of\r\n     * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\r\n     * and a ArrayBuffer (the entire PSSH box) as the property value\r\n     */\r\n    static parsePSSHList(data) {\r\n\r\n        if (data === null || data === undefined)\r\n            return [];\r\n\r\n        let dv = new DataView(data.buffer || data); // data.buffer first for Uint8Array support\r\n        let done = false;\r\n        let pssh = {};\r\n\r\n        // TODO: Need to check every data read for end of buffer\r\n        let byteCursor = 0;\r\n        while (!done) {\r\n\r\n            let size,\r\n                nextBox,\r\n                version,\r\n                systemID;\r\n            let boxStart = byteCursor;\r\n\r\n            if (byteCursor >= dv.buffer.byteLength)\r\n                break;\r\n\r\n            /* Box size */\r\n            size = dv.getUint32(byteCursor);\r\n            nextBox = byteCursor + size;\r\n            byteCursor += 4;\r\n\r\n            /* Verify PSSH */\r\n            if (dv.getUint32(byteCursor) !== 0x70737368) {\r\n                byteCursor = nextBox;\r\n                continue;\r\n            }\r\n            byteCursor += 4;\r\n\r\n            /* Version must be 0 or 1 */\r\n            version = dv.getUint8(byteCursor);\r\n            if (version !== 0 && version !== 1) {\r\n                byteCursor = nextBox;\r\n                continue;\r\n            }\r\n            byteCursor++;\r\n\r\n            byteCursor += 3; /* skip flags */\r\n\r\n            // 16-byte UUID/SystemID\r\n            systemID = '';\r\n            let i, val;\r\n            for (i = 0; i < 4; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 4;\r\n            systemID += '-';\r\n            for (i = 0; i < 2; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 2;\r\n            systemID += '-';\r\n            for (i = 0; i < 2; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 2;\r\n            systemID += '-';\r\n            for (i = 0; i < 2; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 2;\r\n            systemID += '-';\r\n            for (i = 0; i < 6; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 6;\r\n\r\n            systemID = systemID.toLowerCase();\r\n\r\n            /* PSSH Data Size */\r\n            byteCursor += 4;\r\n\r\n            /* PSSH Data */\r\n            pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\r\n            byteCursor = nextBox;\r\n        }\r\n\r\n        return pssh;\r\n    }\r\n}\r\n\r\nexport default CommonEncryption;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc A media capability\r\n * @ignore\r\n */\r\nclass MediaCapability {\r\n    /**\r\n     * @param {string} contentType MIME type and codecs (RFC6386)\r\n     * @param {string} robustness\r\n     * @class\r\n     * @ignore\r\n     */\r\n    constructor(contentType, robustness) {\r\n        this.contentType = contentType;\r\n        this.robustness = robustness;\r\n    }\r\n}\r\n\r\nexport default MediaCapability;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @classdesc Represents a set of configurations that describe the capabilities desired for\r\n *  support by a given CDM\r\n * @ignore\r\n */\r\nclass KeySystemConfiguration {\r\n    /**\r\n     * @param {Array.<MediaCapability>} audioCapabilities array of\r\n     * desired audio capabilities.  Higher preference capabilities should be placed earlier\r\n     * in the array.\r\n     * @param {Array.<MediaCapability>} videoCapabilities array of\r\n     * desired video capabilities.  Higher preference capabilities should be placed earlier\r\n     * in the array.\r\n     * @param {string} distinctiveIdentifier desired use of distinctive identifiers.\r\n     * One of \"required\", \"optional\", or \"not-allowed\"\r\n     * @param {string} persistentState desired support for persistent storage of\r\n     * key systems.  One of \"required\", \"optional\", or \"not-allowed\"\r\n     * @param {Array.<string>} sessionTypes List of session types that must\r\n     * be supported by the key system\r\n     * @class\r\n     */\r\n    constructor(audioCapabilities, videoCapabilities, distinctiveIdentifier, persistentState, sessionTypes) {\r\n        this.initDataTypes = [ 'cenc' ];\r\n        if (audioCapabilities && audioCapabilities.length) {\r\n            this.audioCapabilities = audioCapabilities;\r\n        }\r\n        if (videoCapabilities && videoCapabilities.length) {\r\n            this.videoCapabilities = videoCapabilities;\r\n        }\r\n        this.distinctiveIdentifier = distinctiveIdentifier;\r\n        this.persistentState = persistentState;\r\n        this.sessionTypes = sessionTypes;\r\n    }\r\n}\r\n\r\nexport default KeySystemConfiguration;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport ErrorsBase from '../../../core/errors/ErrorsBase';\r\n/**\r\n * @class\r\n */\r\nclass ProtectionErrors extends ErrorsBase {\r\n\tconstructor () {\r\n        super();\r\n\r\n        /**\r\n         *  Generid key Error code\r\n         */\r\n        this.MEDIA_KEYERR_CODE = 100;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_UNKNOWN_CODE = 101;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_CLIENT_CODE = 102;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_SERVICE_CODE = 103;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_OUTPUT_CODE = 104;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_HARDWARECHANGE_CODE = 105;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_DOMAIN_CODE = 106;\r\n\r\n        /**\r\n         *  Error code returned when an error occured in keymessage event for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEY_MESSAGE_ERROR_CODE = 107;\r\n        /**\r\n         *  Error code returned when challenge is invalid in keymessage event (event triggered by CDM)\r\n         */\r\n        this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE = 108;\r\n        /**\r\n         *  Error code returned when License server certificate has not been successfully updated\r\n         */\r\n        this.SERVER_CERTIFICATE_UPDATED_ERROR_CODE = 109;\r\n        /**\r\n         *  Error code returned when license validity has expired\r\n         */\r\n        this.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE = 110;\r\n        /**\r\n         *  Error code returned when no licenser url is defined\r\n         */\r\n        this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE = 111;\r\n        /**\r\n         *  Error code returned when key system access is denied\r\n         */\r\n        this.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE = 112;\r\n        /**\r\n         *  Error code returned when key session has not been successfully created\r\n         */\r\n        this.KEY_SESSION_CREATED_ERROR_CODE = 113;\r\n        /**\r\n         *  Error code returned when license request failed after a keymessage event has been triggered\r\n         */\r\n        this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE = 114;\r\n\r\n        this.MEDIA_KEYERR_UNKNOWN_MESSAGE = 'An unspecified error occurred. This value is used for errors that don\\'t match any of the other codes.';\r\n        this.MEDIA_KEYERR_CLIENT_MESSAGE = 'The Key System could not be installed or updated.';\r\n        this.MEDIA_KEYERR_SERVICE_MESSAGE = 'The message passed into update indicated an error from the license service.';\r\n        this.MEDIA_KEYERR_OUTPUT_MESSAGE = 'There is no available output device with the required characteristics for the content protection system.';\r\n        this.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE = 'A hardware configuration change caused a content protection error.';\r\n        this.MEDIA_KEYERR_DOMAIN_MESSAGE = 'An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.';\r\n        this.MEDIA_KEY_MESSAGE_ERROR_MESSAGE = 'Multiple key sessions were creates with a user-agent that does not support sessionIDs!! Unpredictable behavior ahead!';\r\n        this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE = 'DRM: Empty key message from CDM';\r\n        this.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE = 'Error updating server certificate -- ';\r\n        this.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE = 'DRM: KeyStatusChange error! -- License has expired';\r\n        this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE = 'DRM: No license server URL specified!';\r\n        this.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE = 'DRM: KeySystem Access Denied! -- ';\r\n        this.KEY_SESSION_CREATED_ERROR_MESSAGE = 'DRM: unable to create session! --';\r\n        this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE = 'DRM: licenser error! --';\r\n    }\r\n}\r\n\r\nlet protectionErrors = new ProtectionErrors();\r\nexport default protectionErrors;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc Defines a license request\r\n * @ignore\r\n */\r\nclass LicenseRequest {\r\n    /**\r\n     * Defines a license request\r\n     *\r\n     * @class\r\n     */\r\n    constructor(url, method, responseType, headers, withCredentials, messageType, sessionId, data) {\r\n\r\n        /**\r\n         * The license request url\r\n         */\r\n        this.url = url;\r\n\r\n        /**\r\n         * The HTTP method\r\n         */\r\n        this.method = method;\r\n\r\n        /**\r\n         * The HTTP response type\r\n         */\r\n        this.responseType = responseType;\r\n\r\n        /**\r\n         * The HTP request headers\r\n         */\r\n        this.headers = headers;\r\n\r\n        /**\r\n         * Wether request is done using credentials (cross-site cookies)\r\n         */\r\n        this.withCredentials = withCredentials;\r\n\r\n        /**\r\n         * The license request message type (see https://www.w3.org/TR/encrypted-media/#dom-mediakeymessagetype)\r\n         */\r\n        this.messageType = messageType;\r\n\r\n        /**\r\n         * The corresponding EME session ID\r\n         */\r\n        this.sessionId = sessionId;\r\n\r\n        /**\r\n         * The license request data\r\n         */\r\n        this.data = data;\r\n    }\r\n}\r\n\r\nexport default LicenseRequest;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc Defines a license response\r\n */\r\nclass LicenseResponse {\r\n    /**\r\n     * Defines a license request\r\n     *\r\n     * @class\r\n     * @ignore\r\n     */\r\n    constructor(url, headers, data) {\r\n\r\n        /**\r\n         * The url that was loaded, that can be redirected from original request url\r\n         */\r\n        this.url = url;\r\n\r\n        /**\r\n         * The HTP response headers\r\n         */\r\n        this.headers = headers;\r\n\r\n        /**\r\n         * The license response data\r\n         */\r\n        this.data = data;\r\n    }\r\n}\r\n\r\nexport default LicenseResponse;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport MediaCapability from '../vo/MediaCapability';\r\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\r\nimport ProtectionErrors from '../errors/ProtectionErrors';\r\nimport DashJSError from '../../vo/DashJSError';\r\nimport LicenseRequest from '../vo/LicenseRequest';\r\nimport LicenseResponse from '../vo/LicenseResponse';\r\nimport {HTTPRequest} from '../../vo/metrics/HTTPRequest';\r\nimport Utils from '../../../core/Utils';\r\nimport Constants from '../../constants/Constants';\r\n\r\nconst NEEDKEY_BEFORE_INITIALIZE_RETRIES = 5;\r\nconst NEEDKEY_BEFORE_INITIALIZE_TIMEOUT = 500;\r\n\r\nconst LICENSE_SERVER_REQUEST_RETRIES = 3;\r\nconst LICENSE_SERVER_REQUEST_RETRY_INTERVAL = 1000;\r\nconst LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT = 8000;\r\n\r\n/**\r\n * @module ProtectionController\r\n * @description Provides access to media protection information and functionality.  Each\r\n * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}\r\n * which encapsulates a set of protection information (EME APIs, selected key system,\r\n * key sessions).  The APIs of ProtectionController mostly align with the latest EME\r\n * APIs.  Key system selection is mostly automated when combined with app-overrideable\r\n * functionality provided in {@link ProtectionKeyController}.\r\n * @todo ProtectionController does almost all of its tasks automatically after init() is\r\n * called.  Applications might want more control over this process and want to go through\r\n * each step manually (key system selection, session creation, session maintenance).\r\n * This module can be accessed using the MediaPlayer API getProtectionController()\r\n * @param {Object} config\r\n */\r\n\r\nfunction ProtectionController(config) {\r\n\r\n    config = config || {};\r\n    const protectionKeyController = config.protectionKeyController;\r\n    let protectionModel = config.protectionModel;\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const debug = config.debug;\r\n    const BASE64 = config.BASE64;\r\n    const constants = config.constants;\r\n    let needkeyRetries = [];\r\n    const cmcdModel = config.cmcdModel;\r\n    const settings = config.settings;\r\n\r\n    let instance,\r\n        logger,\r\n        pendingNeedKeyData,\r\n        mediaInfoArr,\r\n        protDataSet,\r\n        sessionType,\r\n        robustnessLevel,\r\n        keySystem,\r\n        licenseRequestFilters,\r\n        licenseResponseFilters;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        pendingNeedKeyData = [];\r\n        mediaInfoArr = [];\r\n        sessionType = 'temporary';\r\n        robustnessLevel = '';\r\n        licenseRequestFilters = [];\r\n        licenseResponseFilters = [];\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!eventBus || !eventBus.hasOwnProperty('on') || !protectionKeyController || !protectionKeyController.hasOwnProperty('getSupportedKeySystemsFromContentProtection')) {\r\n            throw new Error('Missing config parameter(s)');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialize this protection system with a given audio\r\n     * or video stream information.\r\n     *\r\n     * @param {StreamInfo} [mediaInfo] Media information\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @todo This API will change when we have better support for allowing applications\r\n     * to select different adaptation sets for playback.  Right now it is clunky for\r\n     * applications to create {@link StreamInfo} with the right information,\r\n     * @ignore\r\n     */\r\n    function initializeForMedia(mediaInfo) {\r\n        // Not checking here if a session for similar KS/KID combination is already created\r\n        // because still don't know which keysystem will be selected.\r\n        // Once Keysystem is selected and before creating the session, we will do that check\r\n        // so we create the strictly necessary DRM sessions\r\n        if (!mediaInfo) {\r\n            throw new Error('mediaInfo can not be null or undefined');\r\n        }\r\n\r\n        checkConfig();\r\n\r\n        eventBus.on(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\r\n        eventBus.on(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\r\n        mediaInfoArr.push(mediaInfo);\r\n\r\n        // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio\r\n        // and video will be the same.  Just use one valid MediaInfo object\r\n        const supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);\r\n        if (supportedKS && supportedKS.length > 0) {\r\n            selectKeySystem(supportedKS, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all entries from the mediaInfoArr array for a specific stream id\r\n     * @param {String} streamId\r\n     */\r\n    function clearMediaInfoArrayByStreamId(streamId) {\r\n        mediaInfoArr = mediaInfoArr.filter((mediaInfo) => {\r\n            return mediaInfo.streamInfo.id !== streamId;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns a set of supported key systems and CENC initialization data\r\n     * from the given array of ContentProtection elements.  Only\r\n     * key systems that are supported by this player will be returned.\r\n     * Key systems are returned in priority order (highest first).\r\n     *\r\n     * @param {Array.<Object>} cps - array of content protection elements parsed\r\n     * from the manifest\r\n     * @returns {Array.<Object>} array of objects indicating which supported key\r\n     * systems were found.  Empty array is returned if no\r\n     * supported key systems were found\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function getSupportedKeySystemsFromContentProtection(cps) {\r\n        checkConfig();\r\n        return protectionKeyController.getSupportedKeySystemsFromContentProtection(cps);\r\n    }\r\n\r\n    /**\r\n     * Create a new key session associated with the given initialization data from\r\n     * the MPD or from the PSSH box in the media\r\n     *\r\n     * @param {ArrayBuffer} initData the initialization data\r\n     * @param {Uint8Array} cdmData the custom data to provide to licenser\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionCreated\r\n     * @todo In older versions of the EME spec, there was a one-to-one relationship between\r\n     * initialization data and key sessions.  That is no longer true in the latest APIs.  This\r\n     * API will need to modified (and a new \"generateRequest(keySession, initData)\" API created)\r\n     * to come up to speed with the latest EME standard\r\n     * @ignore\r\n     */\r\n    function createKeySession(initData, cdmData) {\r\n        const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, initData);\r\n        const protData = getProtData(keySystem);\r\n        if (initDataForKS) {\r\n\r\n            // Check for duplicate initData\r\n            if (_isInitDataDuplicate(initDataForKS)) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                protectionModel.createKeySession(initDataForKS, protData, getSessionType(keySystem), cdmData);\r\n            } catch (error) {\r\n                eventBus.trigger(events.KEY_SESSION_CREATED, {\r\n                    data: null,\r\n                    error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + error.message)\r\n                });\r\n            }\r\n        } else if (initData) {\r\n            protectionModel.createKeySession(initData, protData, getSessionType(keySystem), cdmData);\r\n        } else {\r\n            eventBus.trigger(events.KEY_SESSION_CREATED, {\r\n                data: null,\r\n                error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Selected key system is ' + (keySystem ? keySystem.systemString : null) + '.  needkey/encrypted event contains no initData corresponding to that key system!')\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the provided init data is equal to one of the existing init data values\r\n     * @param {any} initDataForKS\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    function _isInitDataDuplicate(initDataForKS) {\r\n\r\n        if (!initDataForKS) {\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const currentInitData = protectionModel.getAllInitData();\r\n            for (let i = 0; i < currentInitData.length; i++) {\r\n                if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\r\n                    logger.debug('DRM: Ignoring initData because we have already seen it!');\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads a key session with the given session ID from persistent storage.  This\r\n     * essentially creates a new key session\r\n     *\r\n     * @param {string} sessionID\r\n     * @param {string} initData\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionCreated\r\n     * @ignore\r\n     */\r\n    function loadKeySession(sessionID, initData) {\r\n        checkConfig();\r\n        protectionModel.loadKeySession(sessionID, initData, getSessionType(keySystem));\r\n    }\r\n\r\n    /**\r\n     * Removes the given key session from persistent storage and closes the session\r\n     * as if {@link ProtectionController#closeKeySession}\r\n     * was called\r\n     *\r\n     * @param {SessionToken} sessionToken the session\r\n     * token\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionRemoved\r\n     * @fires ProtectionController#KeySessionClosed\r\n     * @ignore\r\n     */\r\n    function removeKeySession(sessionToken) {\r\n        checkConfig();\r\n        protectionModel.removeKeySession(sessionToken);\r\n    }\r\n\r\n    /**\r\n     * Closes the key session and releases all associated decryption keys.  These\r\n     * keys will no longer be available for decrypting media\r\n     *\r\n     * @param {SessionToken} sessionToken the session\r\n     * token\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionClosed\r\n     * @ignore\r\n     */\r\n    function closeKeySession(sessionToken) {\r\n        checkConfig();\r\n        protectionModel.closeKeySession(sessionToken);\r\n    }\r\n\r\n    /**\r\n     * Sets a server certificate for use by the CDM when signing key messages\r\n     * intended for a particular license server.  This will fire\r\n     * an error event if a key system has not yet been selected.\r\n     *\r\n     * @param {ArrayBuffer} serverCertificate a CDM-specific license server\r\n     * certificate\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#ServerCertificateUpdated\r\n     */\r\n    function setServerCertificate(serverCertificate) {\r\n        checkConfig();\r\n        protectionModel.setServerCertificate(serverCertificate);\r\n    }\r\n\r\n    /**\r\n     * Associate this protection system with the given HTMLMediaElement.  This\r\n     * causes the system to register for needkey/encrypted events from the given\r\n     * element and provides a destination for setting of MediaKeys\r\n     *\r\n     * @param {HTMLMediaElement} element the media element to which the protection\r\n     * system should be associated\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function setMediaElement(element) {\r\n        checkConfig();\r\n        if (element) {\r\n            protectionModel.setMediaElement(element);\r\n            eventBus.on(events.NEED_KEY, onNeedKey, this);\r\n        } else if (element === null) {\r\n            protectionModel.setMediaElement(element);\r\n            eventBus.off(events.NEED_KEY, onNeedKey, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the session type to use when creating key sessions.  Either \"temporary\" or\r\n     * \"persistent-license\".  Default is \"temporary\".\r\n     *\r\n     * @param {string} value the session type\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function setSessionType(value) {\r\n        sessionType = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.\r\n     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.\r\n     *\r\n     * @param {string} level the robustness level\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function setRobustnessLevel(level) {\r\n        robustnessLevel = level;\r\n    }\r\n\r\n    /**\r\n     * Attach KeySystem-specific data to use for license acquisition with EME\r\n     *\r\n     * @param {Object} data an object containing property names corresponding to\r\n     * key system name strings (e.g. \"org.w3.clearkey\") and associated values\r\n     * being instances of {@link ProtectionData}\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function setProtectionData(data) {\r\n        protDataSet = data;\r\n        protectionKeyController.setProtectionData(data);\r\n    }\r\n\r\n    /**\r\n     * Stop method is called when current playback is stopped/resetted.\r\n     *\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function stop() {\r\n        if (protectionModel) {\r\n            protectionModel.stop();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Destroys all protection data associated with this protection set.  This includes\r\n     * deleting all key sessions. In the case of persistent key sessions, the sessions\r\n     * will simply be unloaded and not deleted.  Additionally, if this protection set is\r\n     * associated with a HTMLMediaElement, it will be detached from that element.\r\n     *\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function reset() {\r\n        checkConfig();\r\n\r\n        licenseRequestFilters = [];\r\n        licenseResponseFilters = [];\r\n\r\n        eventBus.off(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\r\n        eventBus.off(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\r\n\r\n        setMediaElement(null);\r\n\r\n        keySystem = undefined;\r\n\r\n        if (protectionModel) {\r\n            protectionModel.reset();\r\n            protectionModel = null;\r\n        }\r\n\r\n        needkeyRetries.forEach(retryTimeout => clearTimeout(retryTimeout));\r\n        needkeyRetries = [];\r\n\r\n        mediaInfoArr = [];\r\n    }\r\n\r\n    ///////////////\r\n    // Private\r\n    ///////////////\r\n\r\n    function getProtData(keySystem) {\r\n        let protData = null;\r\n        if (keySystem) {\r\n            const keySystemString = keySystem.systemString;\r\n\r\n            if (protDataSet) {\r\n                protData = (keySystemString in protDataSet) ? protDataSet[keySystemString] : null;\r\n            }\r\n        }\r\n        return protData;\r\n    }\r\n\r\n    function getKeySystemConfiguration(keySystem) {\r\n        const protData = getProtData(keySystem);\r\n        const audioCapabilities = [];\r\n        const videoCapabilities = [];\r\n        const audioRobustness = (protData && protData.audioRobustness && protData.audioRobustness.length > 0) ? protData.audioRobustness : robustnessLevel;\r\n        const videoRobustness = (protData && protData.videoRobustness && protData.videoRobustness.length > 0) ? protData.videoRobustness : robustnessLevel;\r\n        const ksSessionType = getSessionType(keySystem);\r\n        const distinctiveIdentifier = (protData && protData.distinctiveIdentifier) ? protData.distinctiveIdentifier : 'optional';\r\n        const persistentState = (protData && protData.persistentState) ? protData.persistentState : (ksSessionType === 'temporary') ? 'optional' : 'required';\r\n\r\n        mediaInfoArr.forEach((media) => {\r\n            if (media.type === constants.AUDIO) {\r\n                audioCapabilities.push(new MediaCapability(media.codec, audioRobustness));\r\n            } else if (media.type === constants.VIDEO) {\r\n                videoCapabilities.push(new MediaCapability(media.codec, videoRobustness));\r\n            }\r\n        });\r\n\r\n        return new KeySystemConfiguration(\r\n            audioCapabilities, videoCapabilities, distinctiveIdentifier,\r\n            persistentState,\r\n            [ksSessionType]);\r\n    }\r\n\r\n    function getSessionType(keySystem) {\r\n        const protData = getProtData(keySystem);\r\n        const ksSessionType = (protData && protData.sessionType) ? protData.sessionType : sessionType;\r\n        return ksSessionType;\r\n    }\r\n\r\n    function selectKeySystem(supportedKS, fromManifest) {\r\n\r\n        // Reorder key systems according to priority order provided in protectionData\r\n        supportedKS = supportedKS.sort((ksA, ksB) => {\r\n            let indexA = (protDataSet && protDataSet[ksA.ks.systemString] && protDataSet[ksA.ks.systemString].priority >= 0) ? protDataSet[ksA.ks.systemString].priority : supportedKS.length;\r\n            let indexB = (protDataSet && protDataSet[ksB.ks.systemString] && protDataSet[ksB.ks.systemString].priority >= 0) ? protDataSet[ksB.ks.systemString].priority : supportedKS.length;\r\n            return indexA - indexB;\r\n        });\r\n\r\n\r\n        // First time, so we need to select a key system\r\n        if (keySystem === undefined) {\r\n            _selectInitialKeySystem(supportedKS, fromManifest);\r\n        }\r\n\r\n        // We already selected a key system. we only need to trigger a new license exchange if the init data has changed\r\n        else if (keySystem) {\r\n            _selectWithExistingKeySystem(supportedKS, fromManifest);\r\n        }\r\n\r\n        // We are in the process of selecting a key system, so just save the data which might be coming from additional AdaptationSets.\r\n        else {\r\n            pendingNeedKeyData.push(supportedKS);\r\n        }\r\n    }\r\n\r\n    function _selectWithExistingKeySystem(supportedKS, fromManifest) {\r\n        const self = this;\r\n        const requestedKeySystems = [];\r\n\r\n        const ksIdx = supportedKS.findIndex((entry) => {\r\n            return entry.ks === keySystem;\r\n        });\r\n\r\n        if (ksIdx === -1 || !supportedKS[ksIdx].initData) {\r\n            return;\r\n        }\r\n\r\n        //  we only need to call this if the init data has changed\r\n        const initDataForKs = CommonEncryption.getPSSHForKeySystem(keySystem, supportedKS[ksIdx].initData);\r\n        if (_isInitDataDuplicate(initDataForKs)) {\r\n            return;\r\n        }\r\n\r\n        requestedKeySystems.push({\r\n            ks: supportedKS[ksIdx].ks,\r\n            configs: [getKeySystemConfiguration(keySystem)]\r\n        });\r\n\r\n        // Ensure that we would be granted key system access using the key\r\n        // system and codec information\r\n        const onKeySystemAccessComplete = function (event) {\r\n            eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n            if (event.error) {\r\n                if (!fromManifest) {\r\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, { error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error) });\r\n                }\r\n            } else {\r\n                logger.info('DRM: KeySystem Access Granted');\r\n                eventBus.trigger(events.KEY_SYSTEM_SELECTED, { data: event.data });\r\n                const protData = getProtData(keySystem);\r\n                if (protectionKeyController.isClearKey(keySystem)) {\r\n                    // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\r\n                    // initData and overwrite possible initData indicated in encrypted event (EME)\r\n                    if (protData && protData.hasOwnProperty('clearkeys')) {\r\n                        const initData = { kids: Object.keys(protData.clearkeys) };\r\n                        supportedKS[ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\r\n                    }\r\n                }\r\n                if (supportedKS[ksIdx].sessionId) {\r\n                    // Load MediaKeySession with sessionId\r\n                    loadKeySession(supportedKS[ksIdx].sessionId, supportedKS[ksIdx].initData);\r\n                } else if (supportedKS[ksIdx].initData) {\r\n                    // Create new MediaKeySession with initData\r\n                    createKeySession(supportedKS[ksIdx].initData, supportedKS[ksIdx].cdmData);\r\n                }\r\n            }\r\n        };\r\n\r\n        eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n        protectionModel.requestKeySystemAccess(requestedKeySystems);\r\n    }\r\n\r\n    function _selectInitialKeySystem(supportedKS, fromManifest) {\r\n        const self = this;\r\n        const requestedKeySystems = [];\r\n        let ksIdx;\r\n\r\n        // First time through, so we need to select a key system\r\n        keySystem = null;\r\n        pendingNeedKeyData.push(supportedKS);\r\n\r\n        // Add all key systems to our request list since we have yet to select a key system\r\n        for (let i = 0; i < supportedKS.length; i++) {\r\n            requestedKeySystems.push({\r\n                ks: supportedKS[i].ks,\r\n                configs: [getKeySystemConfiguration(supportedKS[i].ks)]\r\n            });\r\n        }\r\n\r\n        let keySystemAccess;\r\n        const onKeySystemAccessComplete = function (event) {\r\n            eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n            if (event.error) {\r\n                keySystem = undefined;\r\n                eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\r\n                if (!fromManifest) {\r\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {\r\n                        data: null,\r\n                        error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error)\r\n                    });\r\n                }\r\n            } else {\r\n                keySystemAccess = event.data;\r\n                logger.info('DRM: KeySystem Access Granted (' + keySystemAccess.keySystem.systemString + ')!  Selecting key system...');\r\n                protectionModel.selectKeySystem(keySystemAccess);\r\n            }\r\n        };\r\n        var onKeySystemSelected = function (event) {\r\n            eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\r\n            eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n            if (!event.error) {\r\n                if (!protectionModel) {\r\n                    return;\r\n                }\r\n                keySystem = protectionModel.getKeySystem();\r\n                eventBus.trigger(events.KEY_SYSTEM_SELECTED, { data: keySystemAccess });\r\n                // Set server certificate from protData\r\n                const protData = getProtData(keySystem);\r\n                if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {\r\n                    protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);\r\n                }\r\n\r\n                // Create key session for the remaining AdaptationSets which have been added to pendingNeedKeyData\r\n                for (let i = 0; i < pendingNeedKeyData.length; i++) {\r\n                    for (ksIdx = 0; ksIdx < pendingNeedKeyData[i].length; ksIdx++) {\r\n                        if (keySystem === pendingNeedKeyData[i][ksIdx].ks) {\r\n                            if (protectionKeyController.isClearKey(keySystem)) {\r\n                                // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\r\n                                // initData and overwrite possible initData indicated in encrypted event (EME)\r\n                                if (protData && protData.hasOwnProperty('clearkeys')) {\r\n                                    const initData = { kids: Object.keys(protData.clearkeys) };\r\n                                    pendingNeedKeyData[i][ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\r\n                                }\r\n                            }\r\n                            if (pendingNeedKeyData[i][ksIdx].sessionId) {\r\n                                // Load MediaKeySession with sessionId\r\n                                loadKeySession(pendingNeedKeyData[i][ksIdx].sessionId, pendingNeedKeyData[i][ksIdx].initData);\r\n                            } else if (pendingNeedKeyData[i][ksIdx].initData !== null) {\r\n                                // Create new MediaKeySession with initData\r\n                                createKeySession(pendingNeedKeyData[i][ksIdx].initData, pendingNeedKeyData[i][ksIdx].cdmData);\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                keySystem = undefined;\r\n                if (!fromManifest) {\r\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {\r\n                        data: null,\r\n                        error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + 'Error selecting key system! -- ' + event.error)\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        eventBus.on(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\r\n        eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n        protectionModel.requestKeySystemAccess(requestedKeySystems);\r\n    }\r\n\r\n    function sendLicenseRequestCompleteEvent(data, error) {\r\n        eventBus.trigger(events.LICENSE_REQUEST_COMPLETE, { data: data, error: error });\r\n    }\r\n\r\n    function onKeyStatusChanged(e) {\r\n        if (e.error) {\r\n            eventBus.trigger(events.KEY_STATUSES_CHANGED, { data: null, error: e.error });\r\n        } else {\r\n            logger.debug('DRM: key status = ' + e.status);\r\n        }\r\n    }\r\n\r\n    function onKeyMessage(e) {\r\n        logger.debug('DRM: onKeyMessage');\r\n\r\n        // Dispatch event to applications indicating we received a key message\r\n        const keyMessage = e.data;\r\n        eventBus.trigger(events.KEY_MESSAGE, { data: keyMessage });\r\n        const messageType = (keyMessage.messageType) ? keyMessage.messageType : 'license-request';\r\n        const message = keyMessage.message;\r\n        const sessionToken = keyMessage.sessionToken;\r\n        const protData = getProtData(keySystem);\r\n        const keySystemString = keySystem ? keySystem.systemString : null;\r\n        const licenseServerData = protectionKeyController.getLicenseServer(keySystem, protData, messageType);\r\n        const eventData = { sessionToken: sessionToken, messageType: messageType };\r\n\r\n        // Ensure message from CDM is not empty\r\n        if (!message || message.byteLength === 0) {\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE));\r\n            return;\r\n        }\r\n\r\n        // Message not destined for license server\r\n        if (!licenseServerData) {\r\n            logger.debug('DRM: License server request not required for this message (type = ' + e.data.messageType + ').  Session ID = ' + sessionToken.getSessionID());\r\n            sendLicenseRequestCompleteEvent(eventData);\r\n            return;\r\n        }\r\n\r\n        // Perform any special handling for ClearKey\r\n        if (protectionKeyController.isClearKey(keySystem)) {\r\n            const clearkeys = protectionKeyController.processClearKeyLicenseRequest(keySystem, protData, message);\r\n            if (clearkeys) {\r\n                logger.debug('DRM: ClearKey license request handled by application!');\r\n                sendLicenseRequestCompleteEvent(eventData);\r\n                protectionModel.updateKeySession(sessionToken, clearkeys);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // All remaining key system scenarios require a request to a remote license server\r\n        // Determine license server URL\r\n        let url = null;\r\n        if (protData && protData.serverURL) {\r\n            const serverURL = protData.serverURL;\r\n            if (typeof serverURL === 'string' && serverURL !== '') {\r\n                url = serverURL;\r\n            } else if (typeof serverURL === 'object' && serverURL.hasOwnProperty(messageType)) {\r\n                url = serverURL[messageType];\r\n            }\r\n        } else if (protData && protData.laURL && protData.laURL !== '') {\r\n            // TODO: Deprecated!\r\n            url = protData.laURL;\r\n        } else {\r\n            // For clearkey use the url defined in the manifest\r\n            if (protectionKeyController.isClearKey(keySystem)) {\r\n                url = keySystem.getLicenseServerUrlFromMediaInfo(mediaInfoArr);\r\n            } else {\r\n                const psshData = CommonEncryption.getPSSHData(sessionToken.initData);\r\n                url = keySystem.getLicenseServerURLFromInitData(psshData);\r\n                if (!url) {\r\n                    url = e.data.laURL;\r\n                }\r\n            }\r\n        }\r\n        // Possibly update or override the URL based on the message\r\n        url = licenseServerData.getServerURLFromMessage(url, message, messageType);\r\n\r\n        // Ensure valid license server URL\r\n        if (!url) {\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE));\r\n            return;\r\n        }\r\n\r\n        // Set optional XMLHttpRequest headers from protection data and message\r\n        const reqHeaders = {};\r\n        let withCredentials = false;\r\n        const updateHeaders = function (headers) {\r\n            if (headers) {\r\n                for (const key in headers) {\r\n                    if ('authorization' === key.toLowerCase()) {\r\n                        withCredentials = true;\r\n                    }\r\n                    reqHeaders[key] = headers[key];\r\n                }\r\n            }\r\n        };\r\n        if (protData) {\r\n            updateHeaders(protData.httpRequestHeaders);\r\n        }\r\n        updateHeaders(keySystem.getRequestHeadersFromMessage(message));\r\n\r\n        // Overwrite withCredentials property from protData if present\r\n        if (protData && typeof protData.withCredentials == 'boolean') {\r\n            withCredentials = protData.withCredentials;\r\n        }\r\n\r\n        const reportError = function (xhr, eventData, keySystemString, messageType) {\r\n            const errorMsg = ((xhr.response) ? licenseServerData.getErrorResponse(xhr.response, keySystemString, messageType) : 'NONE');\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\r\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR complete. status is \"' +\r\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState + '.  Response is ' + errorMsg));\r\n        };\r\n\r\n        const onLoad = function (xhr) {\r\n            if (!protectionModel) {\r\n                return;\r\n            }\r\n\r\n            if (xhr.status === 200) {\r\n                let licenseResponse = new LicenseResponse(xhr.responseURL, Utils.parseHttpHeaders(xhr.getAllResponseHeaders ? xhr.getAllResponseHeaders() : null), xhr.response);\r\n                applyFilters(licenseResponseFilters, licenseResponse).then(() => {\r\n                    const licenseMessage = licenseServerData.getLicenseMessage(licenseResponse.data, keySystemString, messageType);\r\n                    if (licenseMessage !== null) {\r\n                        sendLicenseRequestCompleteEvent(eventData);\r\n                        protectionModel.updateKeySession(sessionToken, licenseMessage);\r\n                    } else {\r\n                        reportError(xhr, eventData, keySystemString, messageType);\r\n                    }\r\n                });\r\n            } else {\r\n                reportError(xhr, eventData, keySystemString, messageType);\r\n            }\r\n        };\r\n\r\n        const onAbort = function (xhr) {\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\r\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR aborted. status is \"' +\r\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\r\n        };\r\n\r\n        const onError = function (xhr) {\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\r\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR error. status is \"' +\r\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\r\n        };\r\n\r\n        const reqPayload = keySystem.getLicenseRequestFromMessage(message);\r\n        const reqMethod = licenseServerData.getHTTPMethod(messageType);\r\n        const responseType = licenseServerData.getResponseType(keySystemString, messageType);\r\n        const timeout = protData && !isNaN(protData.httpTimeout) ? protData.httpTimeout : LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT;\r\n        const sessionId = sessionToken.getSessionID() || null;\r\n\r\n        let licenseRequest = new LicenseRequest(url, reqMethod, responseType, reqHeaders, withCredentials, messageType, sessionId, reqPayload);\r\n        const retryAttempts = !isNaN(settings.get().streaming.retryAttempts[HTTPRequest.LICENSE]) ? settings.get().streaming.retryAttempts[HTTPRequest.LICENSE] : LICENSE_SERVER_REQUEST_RETRIES;\r\n            applyFilters(licenseRequestFilters, licenseRequest).then(() => {\r\n                doLicenseRequest(licenseRequest, retryAttempts, timeout, onLoad, onAbort, onError);\r\n            });\r\n    }\r\n\r\n    // Implement license requests with a retry mechanism to avoid temporary network issues to affect playback experience\r\n    function doLicenseRequest(request, retriesCount, timeout, onLoad, onAbort, onError) {\r\n        const xhr = new XMLHttpRequest();\r\n\r\n        if (settings.get().streaming.cmcd && settings.get().streaming.cmcd.enabled) {\r\n            const cmcdMode = settings.get().streaming.cmcd.mode;\r\n            if (cmcdMode === Constants.CMCD_MODE_QUERY) {\r\n                const cmcdParams = cmcdModel.getQueryParameter({\r\n                    url: request.url,\r\n                    type: HTTPRequest.LICENSE\r\n                });\r\n\r\n                if (cmcdParams) {\r\n                    request.url = Utils.addAditionalQueryParameterToUrl(request.url, [cmcdParams]);\r\n                }\r\n            }\r\n        }\r\n\r\n        xhr.open(request.method, request.url, true);\r\n        xhr.responseType = request.responseType;\r\n        xhr.withCredentials = request.withCredentials;\r\n        if (timeout > 0) {\r\n            xhr.timeout = timeout;\r\n        }\r\n        for (const key in request.headers) {\r\n            xhr.setRequestHeader(key, request.headers[key]);\r\n        }\r\n\r\n        if (settings.get().streaming.cmcd && settings.get().streaming.cmcd.enabled) {\r\n            const cmcdMode = settings.get().streaming.cmcd.mode;\r\n            if (cmcdMode === Constants.CMCD_MODE_HEADER) {\r\n                const cmcdHeaders = cmcdModel.getHeaderParameters({\r\n                    url: request.url,\r\n                    type: HTTPRequest.LICENSE\r\n                });\r\n\r\n                if (cmcdHeaders) {\r\n                    for (const header in cmcdHeaders) {\r\n                        let value = cmcdHeaders[header];\r\n                        if (value) {\r\n                            xhr.setRequestHeader(header, value);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const retryRequest = function () {\r\n            // fail silently and retry\r\n            retriesCount--;\r\n            const retryInterval = !isNaN(settings.get().streaming.retryIntervals[HTTPRequest.LICENSE]) ? settings.get().streaming.retryIntervals[HTTPRequest.LICENSE] : LICENSE_SERVER_REQUEST_RETRY_INTERVAL;\r\n            setTimeout(function () {\r\n                doLicenseRequest(request, retriesCount, timeout, onLoad, onAbort, onError);\r\n            }, retryInterval);\r\n        };\r\n\r\n        xhr.onload = function () {\r\n            if (this.status === 200 || retriesCount <= 0) {\r\n                onLoad(this);\r\n            } else {\r\n                logger.warn('License request failed (' + this.status + '). Retrying it... Pending retries: ' + retriesCount);\r\n                retryRequest();\r\n            }\r\n        };\r\n\r\n        xhr.ontimeout = xhr.onerror = function () {\r\n            if (retriesCount <= 0) {\r\n                onError(this);\r\n            } else {\r\n                logger.warn('License request network request failed . Retrying it... Pending retries: ' + retriesCount);\r\n                retryRequest();\r\n            }\r\n        };\r\n\r\n        xhr.onabort = function () {\r\n            onAbort(this);\r\n        };\r\n\r\n        // deprecated, to be removed\r\n        eventBus.trigger(events.LICENSE_REQUEST_SENDING, {\r\n            url: request.url,\r\n            headers: request.headers,\r\n            payload: request.data,\r\n            sessionId: request.sessionId\r\n        });\r\n\r\n        xhr.send(request.data);\r\n    }\r\n\r\n    function onNeedKey(event, retry) {\r\n        logger.debug('DRM: onNeedKey');\r\n        // Ignore non-cenc initData\r\n        if (event.key.initDataType !== 'cenc') {\r\n            logger.warn('DRM:  Only \\'cenc\\' initData is supported!  Ignoring initData of type: ' + event.key.initDataType);\r\n            return;\r\n        }\r\n\r\n        if (mediaInfoArr.length === 0) {\r\n            logger.warn('DRM: onNeedKey called before initializeForMedia, wait until initialized');\r\n            retry = typeof retry === 'undefined' ? 1 : retry + 1;\r\n            if (retry < NEEDKEY_BEFORE_INITIALIZE_RETRIES) {\r\n                needkeyRetries.push(setTimeout(() => {\r\n                    onNeedKey(event, retry);\r\n                }, NEEDKEY_BEFORE_INITIALIZE_TIMEOUT));\r\n                return;\r\n            }\r\n\r\n        }\r\n\r\n        // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).\r\n        // Convert to ArrayBuffer\r\n        let abInitData = event.key.initData;\r\n        if (ArrayBuffer.isView(abInitData)) {\r\n            abInitData = abInitData.buffer;\r\n        }\r\n\r\n        // If key system has already been selected and initData already seen, then do nothing\r\n        if (keySystem) {\r\n            const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, abInitData);\r\n            if (initDataForKS) {\r\n\r\n                // Check for duplicate initData\r\n                if (_isInitDataDuplicate(initDataForKS)) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        logger.debug('DRM: initData:', String.fromCharCode.apply(null, new Uint8Array(abInitData)));\r\n\r\n        const supportedKS = protectionKeyController.getSupportedKeySystems(abInitData, protDataSet);\r\n        if (supportedKS.length === 0) {\r\n            logger.debug('DRM: Received needkey event with initData, but we don\\'t support any of the key systems!');\r\n            return;\r\n        }\r\n\r\n        selectKeySystem(supportedKS, false);\r\n    }\r\n\r\n    function getKeySystems() {\r\n        return protectionKeyController ? protectionKeyController.getKeySystems() : [];\r\n    }\r\n\r\n    function setKeySystems(keySystems) {\r\n        if (protectionKeyController) {\r\n            protectionKeyController.setKeySystems(keySystems);\r\n        }\r\n    }\r\n\r\n    function setLicenseRequestFilters(filters) {\r\n        licenseRequestFilters = filters;\r\n    }\r\n\r\n    function setLicenseResponseFilters(filters) {\r\n        licenseResponseFilters = filters;\r\n    }\r\n\r\n    function applyFilters(filters, param) {\r\n        if (!filters) return Promise.resolve();\r\n        return filters.reduce((prev, next) => {\r\n            return prev.then(() => {\r\n                return next(param);\r\n            });\r\n        }, Promise.resolve());\r\n    }\r\n\r\n    instance = {\r\n        initializeForMedia,\r\n        clearMediaInfoArrayByStreamId,\r\n        createKeySession,\r\n        loadKeySession,\r\n        removeKeySession,\r\n        closeKeySession,\r\n        setServerCertificate,\r\n        setMediaElement,\r\n        setSessionType,\r\n        setRobustnessLevel,\r\n        setProtectionData,\r\n        getSupportedKeySystemsFromContentProtection,\r\n        getKeySystems,\r\n        setKeySystems,\r\n        setLicenseRequestFilters,\r\n        setLicenseResponseFilters,\r\n        stop,\r\n        reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nProtectionController.__dashjs_factory_name = 'ProtectionController';\r\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionController); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc Represents a 128-bit keyID and 128-bit encryption key\r\n * @ignore\r\n */\r\nclass KeyPair {\r\n    /**\r\n     * @param {string} keyID 128-bit key ID, base64 encoded, with no padding\r\n     * @param {string} key 128-bit encryption key, base64 encoded, with no padding\r\n     * @class\r\n     * @ignore\r\n     */\r\n    constructor(keyID, key) {\r\n        this.keyID = keyID;\r\n        this.key = key;\r\n    }\r\n}\r\n\r\nexport default KeyPair;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @classdesc A collection of ClearKey encryption keys with an (optional) associated\r\n *  type\r\n * @ignore\r\n */\r\nclass ClearKeyKeySet {\r\n    /**\r\n     * @param {Array.<KeyPair>} keyPairs\r\n     * @param {string} type the type of keys in this set.  One of either 'persistent'\r\n     * or 'temporary'.  Can also be null or undefined.\r\n     * @class\r\n     * @ignore\r\n     */\r\n    constructor(keyPairs, type) {\r\n        if (type && type !== 'persistent' && type !== 'temporary')\r\n            throw new Error('Invalid ClearKey key set type!  Must be one of \\'persistent\\' or \\'temporary\\'');\r\n        this.keyPairs = keyPairs;\r\n        this.type = type;\r\n    }\r\n\r\n    /**\r\n     * Convert this key set to its JSON Web Key (JWK) representation\r\n     *\r\n     * @return {ArrayBuffer} JWK object UTF-8 encoded as ArrayBuffer\r\n     */\r\n    toJWK() {\r\n        let i;\r\n        let numKeys = this.keyPairs.length;\r\n        let jwk = {keys: []};\r\n\r\n        for (i = 0; i < numKeys; i++) {\r\n            let key = {\r\n                kty: 'oct',\r\n                alg: 'A128KW',\r\n                kid: this.keyPairs[i].keyID,\r\n                k: this.keyPairs[i].key\r\n            };\r\n            jwk.keys.push(key);\r\n        }\r\n        if (this.type) {\r\n            jwk.type = this.type;\r\n        }\r\n        let jwkString = JSON.stringify(jwk);\r\n        const len = jwkString.length;\r\n\r\n        // Convert JSON string to ArrayBuffer\r\n        let buf = new ArrayBuffer(len);\r\n        let bView = new Uint8Array(buf);\r\n        for (i = 0; i < len; i++)\r\n            bView[i] = jwkString.charCodeAt(i);\r\n        return buf;\r\n    }\r\n}\r\n\r\nexport default ClearKeyKeySet;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Protection Constants declaration\r\n * @class\r\n * @ignore\r\n */\r\nclass ProtectionConstants {\r\n\r\n    init () {\r\n        this.CLEARKEY_KEYSTEM_STRING = 'org.w3.clearkey';\r\n        this.WIDEVINE_KEYSTEM_STRING = 'com.widevine.alpha';\r\n        this.PLAYREADY_KEYSTEM_STRING = 'com.microsoft.playready';\r\n    }\r\n\r\n    constructor () {\r\n        this.init();\r\n    }\r\n}\r\n\r\nlet constants = new ProtectionConstants();\r\nexport default constants;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport KeyPair from '../vo/KeyPair';\r\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nconst uuid = 'e2719d58-a985-b3c9-781a-b030af78d30e';\r\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\r\nconst schemeIdURI = 'urn:uuid:' + uuid;\r\n\r\nfunction KeySystemClearKey(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n    const BASE64 = config.BASE64;\r\n    const LICENSE_SERVER_MANIFEST_CONFIGURATIONS = {\r\n        attributes: ['Laurl', 'laurl'],\r\n        prefixes: ['clearkey', 'dashif']\r\n    };\r\n\r\n    /**\r\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\r\n     *\r\n     * @param {ProtectionData} protectionData the protection data\r\n     * @param {ArrayBuffer} message the ClearKey CDM message\r\n     * @returns {ClearKeyKeySet} the key set or null if none found\r\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\r\n     * protection data\r\n     * @memberof KeySystemClearKey\r\n     */\r\n    function getClearKeysFromProtectionData(protectionData, message) {\r\n        let clearkeySet = null;\r\n        if (protectionData) {\r\n            // ClearKey is the only system that does not require a license server URL, so we\r\n            // handle it here when keys are specified in protection data\r\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\r\n            const keyPairs = [];\r\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\r\n                const clearkeyID = jsonMsg.kids[i];\r\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\r\n                if (!clearkey) {\r\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\r\n                }\r\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\r\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\r\n            }\r\n            clearkeySet = new ClearKeyKeySet(keyPairs);\r\n        }\r\n        return clearkeySet;\r\n    }\r\n\r\n    function getInitData(cp, cencContentProtection) {\r\n        try {\r\n            let initData = CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\r\n\r\n            if (!initData && cencContentProtection) {\r\n                const cencDefaultKid = cencDefaultKidToBase64Representation(cencContentProtection['cenc:default_KID']);\r\n                const data = {kids: [cencDefaultKid]};\r\n                initData = new TextEncoder().encode(JSON.stringify(data));\r\n            }\r\n\r\n            return initData;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function cencDefaultKidToBase64Representation(cencDefaultKid) {\r\n        try {\r\n            let kid = cencDefaultKid.replace(/-/g, '');\r\n            kid = btoa(kid.match(/\\w{2}/g).map((a) => {\r\n                return String.fromCharCode(parseInt(a, 16));\r\n            }).join(''));\r\n            return kid.replace(/=/g, '');\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function getRequestHeadersFromMessage(/*message*/) {\r\n        // Set content type to application/json by default\r\n        return {\r\n            'Content-Type': 'application/json'\r\n        };\r\n    }\r\n\r\n    function getLicenseRequestFromMessage(message) {\r\n        return JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\r\n    }\r\n\r\n    function getLicenseServerURLFromInitData(/*initData*/) {\r\n        return null;\r\n    }\r\n\r\n    function getLicenseServerUrlFromMediaInfo(mediaInfo) {\r\n        try {\r\n            if (!mediaInfo || mediaInfo.length === 0) {\r\n                return null;\r\n            }\r\n            let i = 0;\r\n            let licenseServer = null;\r\n            while (i < mediaInfo.length && !licenseServer) {\r\n                const info = mediaInfo[i];\r\n                if (info && info.contentProtection && info.contentProtection.length > 0) {\r\n                    const clearkeyProtData = info.contentProtection.filter((cp) => {\r\n                        return cp.schemeIdUri && cp.schemeIdUri === schemeIdURI;\r\n                    });\r\n                    if (clearkeyProtData && clearkeyProtData.length > 0) {\r\n                        let j = 0;\r\n                        while (j < clearkeyProtData.length && !licenseServer) {\r\n                            const ckData = clearkeyProtData[j];\r\n                            let k = 0;\r\n                            while (k < LICENSE_SERVER_MANIFEST_CONFIGURATIONS.attributes.length && !licenseServer) {\r\n                                let l = 0;\r\n                                const attribute = LICENSE_SERVER_MANIFEST_CONFIGURATIONS.attributes[k];\r\n                                while (l < LICENSE_SERVER_MANIFEST_CONFIGURATIONS.prefixes.length && !licenseServer) {\r\n                                    const prefix = LICENSE_SERVER_MANIFEST_CONFIGURATIONS.prefixes[l];\r\n                                    if (ckData[attribute] && ckData[attribute].__prefix && ckData[attribute].__prefix === prefix && ckData[attribute].__text) {\r\n                                        licenseServer = ckData[attribute].__text;\r\n                                    }\r\n                                    l += 1;\r\n                                }\r\n                                k += 1;\r\n                            }\r\n                            j += 1;\r\n                        }\r\n                    }\r\n                }\r\n                i += 1;\r\n            }\r\n            return licenseServer;\r\n        } catch\r\n            (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function getCDMData() {\r\n        return null;\r\n    }\r\n\r\n    function getSessionId(/*cp*/) {\r\n        return null;\r\n    }\r\n\r\n    instance = {\r\n        uuid: uuid,\r\n        schemeIdURI: schemeIdURI,\r\n        systemString: systemString,\r\n        getInitData: getInitData,\r\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\r\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\r\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\r\n        getCDMData: getCDMData,\r\n        getSessionId: getSessionId,\r\n        getLicenseServerUrlFromMediaInfo,\r\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nKeySystemClearKey.__dashjs_factory_name = 'KeySystemClearKey';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemClearKey); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport KeyPair from '../vo/KeyPair';\r\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nconst uuid = '1077efec-c0b2-4d02-ace3-3c1e52e2fb4b';\r\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\r\nconst schemeIdURI = 'urn:uuid:' + uuid;\r\n\r\nfunction KeySystemW3CClearKey(config) {\r\n    let instance;\r\n    const BASE64 = config.BASE64;\r\n    const logger = config.debug.getLogger(instance);\r\n    /**\r\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\r\n     *\r\n     * @param {ProtectionDataSet} protectionData the protection data\r\n     * @param {ArrayBuffer} message the ClearKey CDM message\r\n     * @returns {ClearKeyKeySet} the key set or null if none found\r\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\r\n     * protection data\r\n     * @memberof KeySystemClearKey\r\n     */\r\n    function getClearKeysFromProtectionData(protectionData, message) {\r\n        let clearkeySet = null;\r\n        if (protectionData) {\r\n            // ClearKey is the only system that does not require a license server URL, so we\r\n            // handle it here when keys are specified in protection data\r\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\r\n            const keyPairs = [];\r\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\r\n                const clearkeyID = jsonMsg.kids[i];\r\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\r\n                if (!clearkey) {\r\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\r\n                }\r\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\r\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\r\n            }\r\n            clearkeySet = new ClearKeyKeySet(keyPairs);\r\n\r\n            logger.warn('ClearKey schemeIdURI is using W3C Common PSSH systemID (1077efec-c0b2-4d02-ace3-3c1e52e2fb4b) in Content Protection. See DASH-IF IOP v4.1 section 7.6.2.4');\r\n        }\r\n        return clearkeySet;\r\n    }\r\n\r\n    function getInitData(cp) {\r\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\r\n    }\r\n\r\n    function getRequestHeadersFromMessage(/*message*/) {\r\n        return null;\r\n    }\r\n\r\n    function getLicenseRequestFromMessage(message) {\r\n        return new Uint8Array(message);\r\n    }\r\n\r\n    function getLicenseServerURLFromInitData(/*initData*/) {\r\n        return null;\r\n    }\r\n\r\n    function getCDMData() {\r\n        return null;\r\n    }\r\n\r\n    function getSessionId(/*cp*/) {\r\n        return null;\r\n    }\r\n\r\n    instance = {\r\n        uuid: uuid,\r\n        schemeIdURI: schemeIdURI,\r\n        systemString: systemString,\r\n        getInitData: getInitData,\r\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\r\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\r\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\r\n        getCDMData: getCDMData,\r\n        getSessionId: getSessionId,\r\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nKeySystemW3CClearKey.__dashjs_factory_name = 'KeySystemW3CClearKey';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemW3CClearKey); /* jshint ignore:line */\r\n\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Google Widevine DRM\r\n *\r\n * @class\r\n * @implements MediaPlayer.dependencies.protection.KeySystem\r\n */\r\n\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nconst uuid = 'edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\r\nconst systemString = ProtectionConstants.WIDEVINE_KEYSTEM_STRING;\r\nconst schemeIdURI = 'urn:uuid:' + uuid;\r\n\r\nfunction KeySystemWidevine(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n    let protData = null;\r\n    const BASE64 = config.BASE64;\r\n\r\n    function init(protectionData) {\r\n        if (protectionData) {\r\n            protData = protectionData;\r\n        }\r\n    }\r\n\r\n    function getInitData(cp) {\r\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\r\n    }\r\n\r\n    function getRequestHeadersFromMessage( /*message*/ ) {\r\n        return null;\r\n    }\r\n\r\n    function getLicenseRequestFromMessage(message) {\r\n        return new Uint8Array(message);\r\n    }\r\n\r\n    function getLicenseServerURLFromInitData( /*initData*/ ) {\r\n        return null;\r\n    }\r\n\r\n    function getCDMData() {\r\n        return null;\r\n    }\r\n\r\n    function getSessionId(cp) {\r\n        // Get sessionId from protectionData or from manifest\r\n        if (protData && protData.sessionId) {\r\n            return protData.sessionId;\r\n        } else if (cp && cp.sessionId) {\r\n            return cp.sessionId;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    instance = {\r\n        uuid: uuid,\r\n        schemeIdURI: schemeIdURI,\r\n        systemString: systemString,\r\n        init: init,\r\n        getInitData: getInitData,\r\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\r\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\r\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\r\n        getCDMData: getCDMData,\r\n        getSessionId: getSessionId\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nKeySystemWidevine.__dashjs_factory_name = 'KeySystemWidevine';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemWidevine); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Microsoft PlayReady DRM\r\n *\r\n * @class\r\n * @implements KeySystem\r\n */\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nconst uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\r\nconst systemString = ProtectionConstants.PLAYREADY_KEYSTEM_STRING;\r\nconst schemeIdURI = 'urn:uuid:' + uuid;\r\nconst PRCDMData = '<PlayReadyCDMData type=\"LicenseAcquisition\"><LicenseAcquisition version=\"1.0\" Proactive=\"false\"><CustomData encoding=\"base64encoded\">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>';\r\nlet protData;\r\n\r\nfunction KeySystemPlayReady(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n    let messageFormat = 'utf-16';\r\n    const BASE64 = config.BASE64;\r\n\r\n    function checkConfig() {\r\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray') || !BASE64.hasOwnProperty('decodeArray') ) {\r\n            throw new Error('Missing config parameter(s)');\r\n        }\r\n    }\r\n\r\n    function getRequestHeadersFromMessage(message) {\r\n        let msg,\r\n            xmlDoc;\r\n        const headers = {};\r\n        const parser = new DOMParser();\r\n        const dataview = (messageFormat === 'utf-16') ? new Uint16Array(message) : new Uint8Array(message);\r\n\r\n        msg = String.fromCharCode.apply(null, dataview);\r\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\r\n\r\n        const headerNameList = xmlDoc.getElementsByTagName('name');\r\n        const headerValueList = xmlDoc.getElementsByTagName('value');\r\n        for (let i = 0; i < headerNameList.length; i++) {\r\n            headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\r\n        }\r\n        // Some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\r\n        // this is NOT w3c conform and license servers may reject the request!\r\n        // -> rename it to proper w3c definition!\r\n        if (headers.hasOwnProperty('Content')) {\r\n            headers['Content-Type'] = headers.Content;\r\n            delete headers.Content;\r\n        }\r\n        // Set Content-Type header by default if not provided in the the CDM message (<PlayReadyKeyMessage/>)\r\n        // or if the message contains directly the challenge itself (Ex: LG SmartTVs)\r\n        if (!headers.hasOwnProperty('Content-Type')) {\r\n            headers['Content-Type'] = 'text/xml; charset=utf-8';\r\n        }\r\n        return headers;\r\n    }\r\n\r\n    function getLicenseRequestFromMessage(message) {\r\n        let licenseRequest = null;\r\n        const parser = new DOMParser();\r\n        const dataview = (messageFormat === 'utf-16') ? new Uint16Array(message) : new Uint8Array(message);\r\n\r\n        checkConfig();\r\n        const msg = String.fromCharCode.apply(null, dataview);\r\n        const xmlDoc = parser.parseFromString(msg, 'application/xml');\r\n\r\n        if (xmlDoc.getElementsByTagName('PlayReadyKeyMessage')[0]) {\r\n            const Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;\r\n            if (Challenge) {\r\n                licenseRequest = BASE64.decode(Challenge);\r\n            }\r\n        } else {\r\n            // The message from CDM is not a wrapped message as on IE11 and Edge,\r\n            // thus it contains direclty the challenge itself\r\n            // (note that the xmlDoc at this point may be unreadable since it may have been interpreted as UTF-16)\r\n            return message;\r\n        }\r\n\r\n        return licenseRequest;\r\n    }\r\n\r\n    function getLicenseServerURLFromInitData(initData) {\r\n        if (initData) {\r\n            const data = new DataView(initData);\r\n            const numRecords = data.getUint16(4, true);\r\n            let offset = 6;\r\n            const parser = new DOMParser();\r\n\r\n            for (let i = 0; i < numRecords; i++) {\r\n                // Parse the PlayReady Record header\r\n                const recordType = data.getUint16(offset, true);\r\n                offset += 2;\r\n                const recordLength = data.getUint16(offset, true);\r\n                offset += 2;\r\n                if (recordType !== 0x0001) {\r\n                    offset += recordLength;\r\n                    continue;\r\n                }\r\n\r\n                const recordData = initData.slice(offset, offset + recordLength);\r\n                const record = String.fromCharCode.apply(null, new Uint16Array(recordData));\r\n                const xmlDoc = parser.parseFromString(record, 'application/xml');\r\n\r\n                // First try <LA_URL>\r\n                if (xmlDoc.getElementsByTagName('LA_URL')[0]) {\r\n                    const laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;\r\n                    if (laurl) {\r\n                        return laurl;\r\n                    }\r\n                }\r\n\r\n                // Optionally, try <LUI_URL>\r\n                if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {\r\n                    const luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;\r\n                    if (luiurl) {\r\n                        return luiurl;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function getInitData(cpData) {\r\n        // * desc@ getInitData\r\n        // *   generate PSSH data from PROHeader defined in MPD file\r\n        // *   PSSH format:\r\n        // *   size (4)\r\n        // *   box type(PSSH) (8)\r\n        // *   Protection SystemID (16)\r\n        // *   protection system data size (4) - length of decoded PROHeader\r\n        // *   decoded PROHeader data from MPD file\r\n        const PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\r\n        const playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\r\n\r\n        let byteCursor = 0;\r\n        let uint8arraydecodedPROHeader = null;\r\n\r\n        let PROSize,\r\n            PSSHSize,\r\n            PSSHBoxBuffer,\r\n            PSSHBox,\r\n            PSSHData;\r\n\r\n        checkConfig();\r\n        if (!cpData) {\r\n            return null;\r\n        }\r\n        // Handle common encryption PSSH\r\n        if ('pssh' in cpData) {\r\n            return CommonEncryption.parseInitDataFromContentProtection(cpData, BASE64);\r\n        }\r\n        // Handle native MS PlayReady ContentProtection elements\r\n        if ('pro' in cpData) {\r\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\r\n        }\r\n        else if ('prheader' in cpData) {\r\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n\r\n        PROSize = uint8arraydecodedPROHeader.length;\r\n        PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\r\n\r\n        PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\r\n\r\n        PSSHBox = new Uint8Array(PSSHBoxBuffer);\r\n        PSSHData = new DataView(PSSHBoxBuffer);\r\n\r\n        PSSHData.setUint32(byteCursor, PSSHSize);\r\n        byteCursor += 0x4;\r\n\r\n        PSSHBox.set(PSSHBoxType, byteCursor);\r\n        byteCursor += PSSHBoxType.length;\r\n\r\n        PSSHBox.set(playreadySystemID, byteCursor);\r\n        byteCursor += playreadySystemID.length;\r\n\r\n        PSSHData.setUint32(byteCursor, PROSize);\r\n        byteCursor += 0x4;\r\n\r\n        PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\r\n        byteCursor += PROSize;\r\n\r\n        return PSSHBox.buffer;\r\n    }\r\n\r\n    /**\r\n     * It seems that some PlayReady implementations return their XML-based CDM\r\n     * messages using UTF16, while others return them as UTF8.  Use this function\r\n     * to modify the message format to expect when parsing CDM messages.\r\n     *\r\n     * @param {string} format the expected message format.  Either \"utf-8\" or \"utf-16\".\r\n     * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\r\n     */\r\n    function setPlayReadyMessageFormat(format) {\r\n        if (format !== 'utf-8' && format !== 'utf-16') {\r\n            throw new Error('Specified message format is not one of \"utf-8\" or \"utf-16\"');\r\n        }\r\n        messageFormat = format;\r\n    }\r\n\r\n    /**\r\n     * Initialize the Key system with protection data\r\n     * @param {Object} protectionData the protection data\r\n     */\r\n    function init(protectionData) {\r\n        if (protectionData) {\r\n            protData = protectionData;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Get Playready Custom data\r\n     */\r\n    function getCDMData() {\r\n        let customData,\r\n            cdmData,\r\n            cdmDataBytes,\r\n            i;\r\n\r\n        checkConfig();\r\n        if (protData && protData.cdmData) {\r\n            // Convert custom data into multibyte string\r\n            customData = [];\r\n            for (i = 0; i < protData.cdmData.length; ++i) {\r\n                customData.push(protData.cdmData.charCodeAt(i));\r\n                customData.push(0);\r\n            }\r\n            customData = String.fromCharCode.apply(null, customData);\r\n\r\n            // Encode in Base 64 the custom data string\r\n            customData = BASE64.encode(customData);\r\n\r\n            // Initialize CDM data with Base 64 encoded custom data\r\n            // (see https://msdn.microsoft.com/en-us/library/dn457361.aspx)\r\n            cdmData = PRCDMData.replace('%CUSTOMDATA%', customData);\r\n\r\n            // Convert CDM data into multibyte characters\r\n            cdmDataBytes = [];\r\n            for (i = 0; i < cdmData.length; ++i) {\r\n                cdmDataBytes.push(cdmData.charCodeAt(i));\r\n                cdmDataBytes.push(0);\r\n            }\r\n\r\n            return new Uint8Array(cdmDataBytes).buffer;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function getSessionId(cp) {\r\n        // Get sessionId from protectionData or from manifest\r\n        if (protData && protData.sessionId) {\r\n            return protData.sessionId;\r\n        } else if (cp && cp.sessionId) {\r\n            return cp.sessionId;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    instance = {\r\n        uuid: uuid,\r\n        schemeIdURI: schemeIdURI,\r\n        systemString: systemString,\r\n        getInitData: getInitData,\r\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\r\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\r\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\r\n        getCDMData: getCDMData,\r\n        getSessionId: getSessionId,\r\n        setPlayReadyMessageFormat: setPlayReadyMessageFormat,\r\n        init: init\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nKeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * CastLabs DRMToday License Server implementation\r\n *\r\n * @implements LicenseServer\r\n * @class\r\n */\r\n\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nfunction DRMToday(config) {\r\n\r\n    config = config || {};\r\n    const BASE64 = config.BASE64;\r\n\r\n    const keySystems = {};\r\n    keySystems[ProtectionConstants.WIDEVINE_KEYSTEM_STRING] = {\r\n        responseType: 'json',\r\n        getLicenseMessage: function (response) {\r\n            return BASE64.decodeArray(response.license);\r\n        },\r\n        getErrorResponse: function (response) {\r\n            return response;\r\n        }\r\n    };\r\n    keySystems[ProtectionConstants.PLAYREADY_KEYSTEM_STRING] = {\r\n        responseType: 'arraybuffer',\r\n        getLicenseMessage: function (response) {\r\n            return response;\r\n        },\r\n        getErrorResponse: function (response) {\r\n            return String.fromCharCode.apply(null, new Uint8Array(response));\r\n        }\r\n    };\r\n\r\n    let instance;\r\n\r\n    function checkConfig() {\r\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray')) {\r\n            throw new Error('Missing config parameter(s)');\r\n        }\r\n    }\r\n\r\n    function getServerURLFromMessage(url /*, message, messageType*/) {\r\n        return url;\r\n    }\r\n\r\n    function getHTTPMethod(/*messageType*/) {\r\n        return 'POST';\r\n    }\r\n\r\n    function getResponseType(keySystemStr/*, messageType*/) {\r\n        return keySystems[keySystemStr].responseType;\r\n    }\r\n\r\n    function getLicenseMessage(serverResponse, keySystemStr/*, messageType*/) {\r\n        checkConfig();\r\n        return keySystems[keySystemStr].getLicenseMessage(serverResponse);\r\n    }\r\n\r\n    function getErrorResponse(serverResponse, keySystemStr/*, messageType*/) {\r\n        return keySystems[keySystemStr].getErrorResponse(serverResponse);\r\n    }\r\n\r\n    instance = {\r\n        getServerURLFromMessage: getServerURLFromMessage,\r\n        getHTTPMethod: getHTTPMethod,\r\n        getResponseType: getResponseType,\r\n        getLicenseMessage: getLicenseMessage,\r\n        getErrorResponse: getErrorResponse\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nDRMToday.__dashjs_factory_name = 'DRMToday';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(DRMToday); /* jshint ignore:line */","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/* global escape: true */\r\n\r\n/**\r\n * Microsoft PlayReady Test License Server\r\n *\r\n * For testing content that uses the PlayReady test server at\r\n *\r\n * @implements LicenseServer\r\n * @class\r\n * @ignore\r\n */\r\n\r\nfunction PlayReady() {\r\n\r\n    let instance;\r\n\r\n    const soap = 'http://schemas.xmlsoap.org/soap/envelope/';\r\n\r\n    function uintToString(arrayBuffer) {\r\n        const encodedString = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));\r\n        const decodedString = decodeURIComponent(escape(encodedString));\r\n        return decodedString;\r\n    }\r\n\r\n    function parseServerResponse(serverResponse) {\r\n        if (window.DOMParser) {\r\n            const stringResponse = uintToString(serverResponse);\r\n            const parser = new window.DOMParser();\r\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\r\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\r\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\r\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\r\n\r\n            if (fault) {\r\n                return null;\r\n            }\r\n        }\r\n        return serverResponse;\r\n    }\r\n\r\n    function parseErrorResponse(serverResponse) {\r\n        let faultstring = '';\r\n        let statusCode = '';\r\n        let message = '';\r\n        let idStart = -1;\r\n        let idEnd = -1;\r\n\r\n        if (window.DOMParser) {\r\n            const stringResponse = uintToString(serverResponse);\r\n            const parser = new window.DOMParser();\r\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\r\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\r\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\r\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\r\n            const detail = fault ? fault.getElementsByTagName('detail')[0] : null;\r\n            const exception = detail ? detail.getElementsByTagName('Exception')[0] : null;\r\n            let node = null;\r\n\r\n            if (fault === null) {\r\n                return stringResponse;\r\n            }\r\n\r\n            node = fault.getElementsByTagName('faultstring')[0].firstChild;\r\n            faultstring = node ? node.nodeValue : null;\r\n\r\n            if (exception !== null) {\r\n                node = exception.getElementsByTagName('StatusCode')[0];\r\n                statusCode = node ? node.firstChild.nodeValue : null;\r\n                node = exception.getElementsByTagName('Message')[0];\r\n                message = node ? node.firstChild.nodeValue : null;\r\n                idStart = message ? message.lastIndexOf('[') + 1 : -1;\r\n                idEnd = message ? message.indexOf(']') : -1;\r\n                message = message ? message.substring(idStart, idEnd) : '';\r\n            }\r\n        }\r\n\r\n        let errorString = `code: ${statusCode}, name: ${faultstring}`;\r\n        if (message) {\r\n            errorString += `, message: ${message}`;\r\n        }\r\n\r\n        return errorString;\r\n    }\r\n\r\n    function getServerURLFromMessage(url /*, message, messageType*/) {\r\n        return url;\r\n    }\r\n\r\n    function getHTTPMethod(/*messageType*/) {\r\n        return 'POST';\r\n    }\r\n\r\n    function getResponseType(/*keySystemStr, messageType*/) {\r\n        return 'arraybuffer';\r\n    }\r\n\r\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\r\n        return parseServerResponse.call(this, serverResponse);\r\n    }\r\n\r\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\r\n        return parseErrorResponse.call(this, serverResponse);\r\n    }\r\n\r\n    instance = {\r\n        getServerURLFromMessage: getServerURLFromMessage,\r\n        getHTTPMethod: getHTTPMethod,\r\n        getResponseType: getResponseType,\r\n        getLicenseMessage: getLicenseMessage,\r\n        getErrorResponse: getErrorResponse\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nPlayReady.__dashjs_factory_name = 'PlayReady';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(PlayReady); /* jshint ignore:line */","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction Widevine() {\r\n\r\n    let instance;\r\n\r\n    function getServerURLFromMessage(url /*, message, messageType*/) {\r\n        return url;\r\n    }\r\n\r\n    function getHTTPMethod(/*messageType*/) {\r\n        return 'POST';\r\n    }\r\n\r\n    function getResponseType(/*keySystemStr, messageType*/) {\r\n        return 'arraybuffer';\r\n    }\r\n\r\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\r\n        return serverResponse;\r\n    }\r\n\r\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\r\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\r\n    }\r\n\r\n    instance = {\r\n        getServerURLFromMessage: getServerURLFromMessage,\r\n        getHTTPMethod: getHTTPMethod,\r\n        getResponseType: getResponseType,\r\n        getLicenseMessage: getLicenseMessage,\r\n        getErrorResponse: getErrorResponse\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nWidevine.__dashjs_factory_name = 'Widevine';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(Widevine); /* jshint ignore:line */","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * CableLabs ClearKey license server implementation\r\n *\r\n * For testing purposes and evaluating potential uses for ClearKey, we have developed\r\n * a dirt-simple API for requesting ClearKey licenses from a remote server.\r\n *\r\n * @implements LicenseServer\r\n * @class\r\n */\r\nimport KeyPair from '../vo/KeyPair';\r\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\r\n\r\nfunction ClearKey() {\r\n\r\n    let instance;\r\n\r\n    function getServerURLFromMessage(url /* message, messageType*/) {\r\n        return url;\r\n    }\r\n\r\n    function getHTTPMethod(/*messageType*/) {\r\n        return 'POST';\r\n    }\r\n\r\n    function getResponseType(/*keySystemStr*/) {\r\n        return 'json';\r\n    }\r\n\r\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\r\n        if (!serverResponse.hasOwnProperty('keys')) {\r\n            return null;\r\n        }\r\n        let keyPairs = [];\r\n        for (let i = 0; i < serverResponse.keys.length; i++) {\r\n            let keypair = serverResponse.keys[i];\r\n            let keyid = keypair.kid.replace(/=/g, '');\r\n            let key = keypair.k.replace(/=/g, '');\r\n\r\n            keyPairs.push(new KeyPair(keyid, key));\r\n        }\r\n        return new ClearKeyKeySet(keyPairs);\r\n    }\r\n\r\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\r\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\r\n    }\r\n\r\n    instance = {\r\n        getServerURLFromMessage: getServerURLFromMessage,\r\n        getHTTPMethod: getHTTPMethod,\r\n        getResponseType: getResponseType,\r\n        getLicenseMessage: getLicenseMessage,\r\n        getErrorResponse: getErrorResponse\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nClearKey.__dashjs_factory_name = 'ClearKey';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(ClearKey); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport CommonEncryption from './../CommonEncryption';\r\nimport KeySystemClearKey from './../drm/KeySystemClearKey';\r\nimport KeySystemW3CClearKey from './../drm/KeySystemW3CClearKey';\r\nimport KeySystemWidevine from './../drm/KeySystemWidevine';\r\nimport KeySystemPlayReady from './../drm/KeySystemPlayReady';\r\nimport DRMToday from './../servers/DRMToday';\r\nimport PlayReady from './../servers/PlayReady';\r\nimport Widevine from './../servers/Widevine';\r\nimport ClearKey from './../servers/ClearKey';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\n/**\r\n * @module ProtectionKeyController\r\n * @ignore\r\n * @description Media protection key system functionality that can be modified/overridden by applications\r\n */\r\nfunction ProtectionKeyController() {\r\n\r\n    let context = this.context;\r\n\r\n    let instance,\r\n        debug,\r\n        logger,\r\n        keySystems,\r\n        BASE64,\r\n        clearkeyKeySystem,\r\n        clearkeyW3CKeySystem;\r\n\r\n    function setConfig(config) {\r\n        if (!config) return;\r\n\r\n        if (config.debug) {\r\n            debug = config.debug;\r\n            logger = debug.getLogger(instance);\r\n        }\r\n\r\n        if (config.BASE64) {\r\n            BASE64 = config.BASE64;\r\n        }\r\n    }\r\n\r\n    function initialize() {\r\n        keySystems = [];\r\n\r\n        let keySystem;\r\n\r\n        // PlayReady\r\n        keySystem = KeySystemPlayReady(context).getInstance({BASE64: BASE64});\r\n        keySystems.push(keySystem);\r\n\r\n        // Widevine\r\n        keySystem = KeySystemWidevine(context).getInstance({BASE64: BASE64});\r\n        keySystems.push(keySystem);\r\n\r\n        // ClearKey\r\n        keySystem = KeySystemClearKey(context).getInstance({BASE64: BASE64});\r\n        keySystems.push(keySystem);\r\n        clearkeyKeySystem = keySystem;\r\n\r\n        // W3C ClearKey\r\n        keySystem = KeySystemW3CClearKey(context).getInstance({BASE64: BASE64, debug: debug});\r\n        keySystems.push(keySystem);\r\n        clearkeyW3CKeySystem = keySystem;\r\n    }\r\n\r\n    /**\r\n     * Returns a prioritized list of key systems supported\r\n     * by this player (not necessarily those supported by the\r\n     * user agent)\r\n     *\r\n     * @returns {Array.<KeySystem>} a prioritized\r\n     * list of key systems\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function getKeySystems() {\r\n        return keySystems;\r\n    }\r\n\r\n    /**\r\n     * Sets the prioritized list of key systems to be supported\r\n     * by this player.\r\n     *\r\n     * @param {Array.<KeySystem>} newKeySystems the new prioritized\r\n     * list of key systems\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function setKeySystems(newKeySystems) {\r\n        keySystems = newKeySystems;\r\n    }\r\n\r\n    /**\r\n     * Returns the key system associated with the given key system string\r\n     * name (i.e. 'org.w3.clearkey')\r\n     *\r\n     * @param {string} systemString the system string\r\n     * @returns {KeySystem|null} the key system\r\n     * or null if no supported key system is associated with the given key\r\n     * system string\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function getKeySystemBySystemString(systemString) {\r\n        for (let i = 0; i < keySystems.length; i++) {\r\n            if (keySystems[i].systemString === systemString) {\r\n                return keySystems[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Determines whether the given key system is ClearKey.  This is\r\n     * necessary because the EME spec defines ClearKey and its method\r\n     * for providing keys to the key session; and this method has changed\r\n     * between the various API versions.  Our EME-specific ProtectionModels\r\n     * must know if the system is ClearKey so that it can format the keys\r\n     * according to the particular spec version.\r\n     *\r\n     * @param {Object} keySystem the key\r\n     * @returns {boolean} true if this is the ClearKey key system, false\r\n     * otherwise\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function isClearKey(keySystem) {\r\n        return (keySystem === clearkeyKeySystem || keySystem === clearkeyW3CKeySystem);\r\n    }\r\n\r\n    /**\r\n     * Check equality of initData array buffers.\r\n     *\r\n     * @param {ArrayBuffer} initData1 - first initData\r\n     * @param {ArrayBuffer} initData2 - second initData\r\n     * @returns {boolean} true if the initData arrays are equal in size and\r\n     * contents, false otherwise\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function initDataEquals(initData1, initData2) {\r\n        if (initData1.byteLength === initData2.byteLength) {\r\n            let data1 = new Uint8Array(initData1);\r\n            let data2 = new Uint8Array(initData2);\r\n\r\n            for (let j = 0; j < data1.length; j++) {\r\n                if (data1[j] !== data2[j]) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns a set of supported key systems and CENC initialization data\r\n     * from the given array of ContentProtection elements.  Only\r\n     * key systems that are supported by this player will be returned.\r\n     * Key systems are returned in priority order (highest first).\r\n     *\r\n     * @param {Array.<Object>} cps - array of content protection elements parsed\r\n     * from the manifest\r\n     * @returns {Array.<Object>} array of objects indicating which supported key\r\n     * systems were found.  Empty array is returned if no\r\n     * supported key systems were found\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function getSupportedKeySystemsFromContentProtection(cps) {\r\n        let cp, ks, ksIdx, cpIdx;\r\n        let supportedKS = [];\r\n\r\n        if (cps) {\r\n            const cencContentProtection = CommonEncryption.findCencContentProtection(cps);\r\n            for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\r\n                ks = keySystems[ksIdx];\r\n                for (cpIdx = 0; cpIdx < cps.length; ++cpIdx) {\r\n                    cp = cps[cpIdx];\r\n                    if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {\r\n                        // Look for DRM-specific ContentProtection\r\n                        let initData = ks.getInitData(cp, cencContentProtection);\r\n\r\n                        supportedKS.push({\r\n                            ks: keySystems[ksIdx],\r\n                            initData: initData,\r\n                            cdmData: ks.getCDMData(),\r\n                            sessionId: ks.getSessionId(cp)\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return supportedKS;\r\n    }\r\n\r\n    /**\r\n     * Returns key systems supported by this player for the given PSSH\r\n     * initializationData. Only key systems supported by this player\r\n     * that have protection data present will be returned.  Key systems are returned in priority order\r\n     * (highest priority first)\r\n     *\r\n     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs\r\n     * supported by the content\r\n     * @param {ProtectionData} protDataSet user specified protection data - license server url etc\r\n     * supported by the content\r\n     * @returns {Array.<Object>} array of objects indicating which supported key\r\n     * systems were found.  Empty array is returned if no\r\n     * supported key systems were found\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function getSupportedKeySystems(initData, protDataSet) {\r\n        let supportedKS = [];\r\n        let pssh = CommonEncryption.parsePSSHList(initData);\r\n        let ks, keySystemString, shouldNotFilterOutKeySystem;\r\n\r\n        for (let ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\r\n            ks = keySystems[ksIdx];\r\n            keySystemString = ks.systemString;\r\n            shouldNotFilterOutKeySystem = (protDataSet) ? keySystemString in protDataSet : true;\r\n\r\n            if (ks.uuid in pssh && shouldNotFilterOutKeySystem) {\r\n                supportedKS.push({\r\n                    ks: ks,\r\n                    initData: pssh[ks.uuid],\r\n                    cdmData: ks.getCDMData(),\r\n                    sessionId: ks.getSessionId()\r\n                });\r\n            }\r\n        }\r\n        return supportedKS;\r\n    }\r\n\r\n    /**\r\n     * Returns the license server implementation data that should be used for this request.\r\n     *\r\n     * @param {KeySystem} keySystem the key system\r\n     * associated with this license request\r\n     * @param {ProtectionData} protData protection data to use for the\r\n     * request\r\n     * @param {string} [messageType=\"license-request\"] the message type associated with this\r\n     * request.  Supported message types can be found\r\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\r\n     * @returns {LicenseServer|null} the license server\r\n     * implementation that should be used for this request or null if the player should not\r\n     * pass messages of the given type to a license server\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     *\r\n     */\r\n    function getLicenseServer(keySystem, protData, messageType) {\r\n\r\n        // Our default server implementations do not do anything with \"license-release\" or\r\n        // \"individualization-request\" messages, so we just send a success event\r\n        if (messageType === 'license-release' || messageType === 'individualization-request') {\r\n            return null;\r\n        }\r\n\r\n        let licenseServerData = null;\r\n        if (protData && protData.hasOwnProperty('drmtoday')) {\r\n            licenseServerData = DRMToday(context).getInstance({BASE64: BASE64});\r\n        } else if (keySystem.systemString === ProtectionConstants.WIDEVINE_KEYSTEM_STRING) {\r\n            licenseServerData = Widevine(context).getInstance();\r\n        } else if (keySystem.systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING) {\r\n            licenseServerData = PlayReady(context).getInstance();\r\n        } else if (keySystem.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING) {\r\n            licenseServerData = ClearKey(context).getInstance();\r\n        }\r\n\r\n        return licenseServerData;\r\n    }\r\n\r\n    /**\r\n     * Allows application-specific retrieval of ClearKey keys.\r\n     *\r\n     * @param {KeySystem} clearkeyKeySystem They exact ClearKey System to be used\r\n     * @param {ProtectionData} protData protection data to use for the\r\n     * request\r\n     * @param {ArrayBuffer} message the key message from the CDM\r\n     * @return {ClearKeyKeySet|null} the clear keys associated with\r\n     * the request or null if no keys can be returned by this function\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function processClearKeyLicenseRequest(clearkeyKeySystem, protData, message) {\r\n        try {\r\n            return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);\r\n        } catch (error) {\r\n            logger.error('Failed to retrieve clearkeys from ProtectionData');\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function setProtectionData(protectionDataSet) {\r\n        var getProtectionData = function (keySystemString) {\r\n            var protData = null;\r\n            if (protectionDataSet) {\r\n                protData = (keySystemString in protectionDataSet) ? protectionDataSet[keySystemString] : null;\r\n            }\r\n            return protData;\r\n        };\r\n\r\n        for (var i = 0; i < keySystems.length; i++) {\r\n            var keySystem = keySystems[i];\r\n            if (keySystem.hasOwnProperty('init')) {\r\n                keySystem.init(getProtectionData(keySystem.systemString));\r\n            }\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        setProtectionData: setProtectionData,\r\n        isClearKey: isClearKey,\r\n        initDataEquals: initDataEquals,\r\n        getKeySystems: getKeySystems,\r\n        setKeySystems: setKeySystems,\r\n        getKeySystemBySystemString: getKeySystemBySystemString,\r\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\r\n        getSupportedKeySystems: getSupportedKeySystems,\r\n        getLicenseServer: getLicenseServer,\r\n        processClearKeyLicenseRequest: processClearKeyLicenseRequest,\r\n        setConfig: setConfig\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nProtectionKeyController.__dashjs_factory_name = 'ProtectionKeyController';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(ProtectionKeyController); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventsBase from '../../core/events/EventsBase';\r\n/**\r\n * @class\r\n  */\r\nclass ProtectionEvents extends EventsBase {\r\n    /**\r\n     * @description Public facing external events to be used when including protection package.\r\n     * All public events will be aggregated into the MediaPlayerEvents Class and can be accessed\r\n     * via MediaPlayer.events.  public_ is the prefix that we use to move event names to MediaPlayerEvents.\r\n     */\r\n    constructor () {\r\n        super();\r\n\r\n        /**\r\n         * Event ID for events delivered when the protection set receives\r\n         * a key message from the CDM\r\n         *\r\n         * @ignore\r\n         */\r\n        this.INTERNAL_KEY_MESSAGE = 'internalKeyMessage';\r\n\r\n        /**\r\n         * Event ID for events delivered when a key system selection procedure\r\n         * completes\r\n         * @ignore\r\n         */\r\n        this.INTERNAL_KEY_SYSTEM_SELECTED = 'internalKeySystemSelected';\r\n\r\n        /**\r\n         * Event ID for events delivered when the status of one decryption keys has changed\r\n         * @ignore\r\n         */\r\n        this.INTERNAL_KEY_STATUS_CHANGED = 'internalkeyStatusChanged';\r\n\r\n        /**\r\n         * Event ID for events delivered when a new key has been added\r\n         *\r\n         * @constant\r\n         * @deprecated The latest versions of the EME specification no longer\r\n         * use this event.  {@MediaPlayer.models.protectionModel.eventList.KEY_STATUSES_CHANGED}\r\n         * is preferred.\r\n         * @event ProtectionEvents#KEY_ADDED\r\n         */\r\n        this.KEY_ADDED = 'public_keyAdded';\r\n        /**\r\n         * Event ID for events delivered when an error is encountered by the CDM\r\n         * while processing a license server response message\r\n         * @event ProtectionEvents#KEY_ERROR\r\n         */\r\n        this.KEY_ERROR = 'public_keyError';\r\n\r\n        /**\r\n         * Event ID for events delivered when the protection set receives\r\n         * a key message from the CDM\r\n         * @event ProtectionEvents#KEY_MESSAGE\r\n         */\r\n        this.KEY_MESSAGE = 'public_keyMessage';\r\n\r\n        /**\r\n         * Event ID for events delivered when a key session close\r\n         * process has completed\r\n         * @event ProtectionEvents#KEY_SESSION_CLOSED\r\n         */\r\n        this.KEY_SESSION_CLOSED = 'public_keySessionClosed';\r\n\r\n        /**\r\n         * Event ID for events delivered when a new key sessions creation\r\n         * process has completed\r\n         * @event ProtectionEvents#KEY_SESSION_CREATED\r\n         */\r\n        this.KEY_SESSION_CREATED = 'public_keySessionCreated';\r\n\r\n        /**\r\n         * Event ID for events delivered when a key session removal\r\n         * process has completed\r\n         * @event ProtectionEvents#KEY_SESSION_REMOVED\r\n         */\r\n        this.KEY_SESSION_REMOVED = 'public_keySessionRemoved';\r\n\r\n        /**\r\n         * Event ID for events delivered when the status of one or more\r\n         * decryption keys has changed\r\n         * @event ProtectionEvents#KEY_STATUSES_CHANGED\r\n         */\r\n        this.KEY_STATUSES_CHANGED = 'public_keyStatusesChanged';\r\n\r\n        /**\r\n         * Event ID for events delivered when a key system access procedure\r\n         * has completed\r\n         * @ignore\r\n         */\r\n        this.KEY_SYSTEM_ACCESS_COMPLETE = 'public_keySystemAccessComplete';\r\n\r\n        /**\r\n         * Event ID for events delivered when a key system selection procedure\r\n         * completes\r\n         * @event ProtectionEvents#KEY_SYSTEM_SELECTED\r\n         */\r\n        this.KEY_SYSTEM_SELECTED = 'public_keySystemSelected';\r\n\r\n        /**\r\n         * Event ID for events delivered when a license request procedure\r\n         * has completed\r\n         * @event ProtectionEvents#LICENSE_REQUEST_COMPLETE\r\n         */\r\n        this.LICENSE_REQUEST_COMPLETE = 'public_licenseRequestComplete';\r\n\r\n        /**\r\n         * Sending a license rquest\r\n         * @event ProtectionEvents#LICENSE_REQUEST_SENDING\r\n         */\r\n        this.LICENSE_REQUEST_SENDING = 'public_licenseRequestSending';\r\n\r\n        /**\r\n         * Event ID for needkey/encrypted events\r\n         * @ignore\r\n         */\r\n        this.NEED_KEY = 'needkey';\r\n\r\n        /**\r\n         * Event ID for events delivered when the Protection system is detected and created.\r\n         * @event ProtectionEvents#PROTECTION_CREATED\r\n         */\r\n        this.PROTECTION_CREATED = 'public_protectioncreated';\r\n\r\n        /**\r\n         * Event ID for events delivered when the Protection system is destroyed.\r\n         * @event ProtectionEvents#PROTECTION_DESTROYED\r\n         */\r\n        this.PROTECTION_DESTROYED = 'public_protectiondestroyed';\r\n\r\n        /**\r\n         * Event ID for events delivered when a new server certificate has\r\n         * been delivered to the CDM\r\n         * @ignore\r\n         */\r\n        this.SERVER_CERTIFICATE_UPDATED = 'serverCertificateUpdated';\r\n\r\n        /**\r\n         * Event ID for events delivered when the process of shutting down\r\n         * a protection set has completed\r\n         * @ignore\r\n         */\r\n        this.TEARDOWN_COMPLETE =  'protectionTeardownComplete';\r\n\r\n        /**\r\n         * Event ID for events delivered when a HTMLMediaElement has been\r\n         * associated with the protection set\r\n         * @ignore\r\n         */\r\n        this.VIDEO_ELEMENT_SELECTED = 'videoElementSelected';\r\n\r\n        /**\r\n         * Triggered when the key session has been updated successfully\r\n         * @ignore\r\n         */\r\n        this.KEY_SESSION_UPDATED = 'public_keySessionUpdated';\r\n    }\r\n}\r\n\r\nlet protectionEvents = new ProtectionEvents();\r\nexport default protectionEvents;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc NeedKey\r\n * @ignore\r\n */\r\nclass NeedKey {\r\n    /**\r\n     * @param {ArrayBuffer} initData the initialization data\r\n     * @param {string} initDataType initialization data type\r\n     * @class\r\n     */\r\n    constructor(initData, initDataType) {\r\n        this.initData = initData;\r\n        this.initDataType = initDataType;\r\n    }\r\n}\r\n\r\nexport default NeedKey;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc EME-independent KeyMessage\r\n * @ignore\r\n */\r\nclass KeyMessage {\r\n    /**\r\n     * @param {SessionToken} sessionToken the session\r\n     * to which the key message is associated\r\n     * @param {ArrayBuffer} message the key message\r\n     * @param {string} defaultURL license acquisition URL provided by the CDM\r\n     * @param {string} messageType Supported message types can be found\r\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\r\n     * @class\r\n     */\r\n    constructor(sessionToken, message, defaultURL, messageType) {\r\n        this.sessionToken = sessionToken;\r\n        this.message = message;\r\n        this.defaultURL = defaultURL;\r\n        this.messageType = messageType ? messageType : 'license-request';\r\n    }\r\n}\r\n\r\nexport default KeyMessage;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc Creates a new key system access token.  Represents a valid key system for\r\n * given piece of content and key system requirements.  Used to initialize license\r\n * acquisition operations.\r\n * @ignore\r\n */\r\nclass KeySystemAccess {\r\n    /**\r\n     * @param {MediaPlayer.dependencies.protection.KeySystem} keySystem the key system\r\n     * @param {KeySystemConfiguration} ksConfiguration the\r\n     * subset of configurations passed to the key system access request that are supported\r\n     * by this user agent\r\n     * @class\r\n     * @ignore\r\n     */\r\n    constructor(keySystem, ksConfiguration) {\r\n        this.keySystem = keySystem;\r\n        this.ksConfiguration = ksConfiguration;\r\n    }\r\n}\r\n\r\nexport default KeySystemAccess;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Most recent EME implementation\r\n *\r\n * Implemented by Google Chrome v36+ (Windows, OSX, Linux)\r\n *\r\n * @implements ProtectionModel\r\n * @class\r\n */\r\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\r\nimport NeedKey from '../vo/NeedKey';\r\nimport ProtectionErrors from '../errors/ProtectionErrors';\r\nimport DashJSError from '../../vo/DashJSError';\r\nimport KeyMessage from '../vo/KeyMessage';\r\nimport KeySystemAccess from '../vo/KeySystemAccess';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nfunction ProtectionModel_21Jan2015(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\r\n    const events = config.events;\r\n    const debug = config.debug;\r\n\r\n    let instance,\r\n        logger,\r\n        keySystem,\r\n        videoElement,\r\n        mediaKeys,\r\n        sessions,\r\n        eventHandler,\r\n        protectionKeyController;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        keySystem = null;\r\n        videoElement = null;\r\n        mediaKeys = null;\r\n        sessions = [];\r\n        protectionKeyController = ProtectionKeyController(context).getInstance();\r\n        eventHandler = createEventHandler();\r\n    }\r\n\r\n    function reset() {\r\n        const numSessions = sessions.length;\r\n        let session;\r\n\r\n        if (numSessions !== 0) {\r\n            // Called when we are done closing a session.  Success or fail\r\n            const done = function (session) {\r\n                removeSession(session);\r\n                if (sessions.length === 0) {\r\n                    if (videoElement) {\r\n                        videoElement.removeEventListener('encrypted', eventHandler);\r\n                        videoElement.setMediaKeys(null).then(function () {\r\n                            eventBus.trigger(events.TEARDOWN_COMPLETE);\r\n                        });\r\n                    } else {\r\n                        eventBus.trigger(events.TEARDOWN_COMPLETE);\r\n                    }\r\n                }\r\n            };\r\n            for (let i = 0; i < numSessions; i++) {\r\n                session = sessions[i];\r\n                (function (s) {\r\n                    // Override closed promise resolver\r\n                    session.session.closed.then(function () {\r\n                        done(s);\r\n                    });\r\n                    // Close the session and handle errors, otherwise promise\r\n                    // resolver above will be called\r\n                    closeKeySessionInternal(session).catch(function () {\r\n                        done(s);\r\n                    });\r\n\r\n                })(session);\r\n            }\r\n        } else {\r\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\r\n        }\r\n    }\r\n\r\n    function stop() {\r\n        // Close and remove not usable sessions\r\n        let session;\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            session = sessions[i];\r\n            if (!session.getUsable()) {\r\n                closeKeySessionInternal(session).catch(function () {\r\n                    removeSession(session);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    function getKeySystem() {\r\n        return keySystem;\r\n    }\r\n\r\n    function getAllInitData() {\r\n        const retVal = [];\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            if (sessions[i].initData) {\r\n                retVal.push(sessions[i].initData);\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    function requestKeySystemAccess(ksConfigurations) {\r\n        requestKeySystemAccessInternal(ksConfigurations, 0);\r\n    }\r\n\r\n    function selectKeySystem(keySystemAccess) {\r\n        keySystemAccess.mksa.createMediaKeys().then(function (mkeys) {\r\n            keySystem = keySystemAccess.keySystem;\r\n            mediaKeys = mkeys;\r\n            if (videoElement) {\r\n                videoElement.setMediaKeys(mediaKeys).then(function () {\r\n                    eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\r\n                });\r\n            } else {\r\n                eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\r\n            }\r\n\r\n        }).catch(function () {\r\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, { error: 'Error selecting keys system (' + keySystemAccess.keySystem.systemString + ')! Could not create MediaKeys -- TODO' });\r\n        });\r\n    }\r\n\r\n    function setMediaElement(mediaElement) {\r\n        if (videoElement === mediaElement)\r\n            return;\r\n\r\n        // Replacing the previous element\r\n        if (videoElement) {\r\n            videoElement.removeEventListener('encrypted', eventHandler);\r\n            if (videoElement.setMediaKeys) {\r\n                videoElement.setMediaKeys(null);\r\n            }\r\n        }\r\n\r\n        videoElement = mediaElement;\r\n\r\n        // Only if we are not detaching from the existing element\r\n        if (videoElement) {\r\n            videoElement.addEventListener('encrypted', eventHandler);\r\n            if (videoElement.setMediaKeys && mediaKeys) {\r\n                videoElement.setMediaKeys(mediaKeys);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setServerCertificate(serverCertificate) {\r\n        if (!keySystem || !mediaKeys) {\r\n            throw new Error('Can not set server certificate until you have selected a key system');\r\n        }\r\n        mediaKeys.setServerCertificate(serverCertificate).then(function () {\r\n            logger.info('DRM: License server certificate successfully updated.');\r\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED);\r\n        }).catch(function (error) {\r\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED, { error: new DashJSError(ProtectionErrors.SERVER_CERTIFICATE_UPDATED_ERROR_CODE, ProtectionErrors.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE + error.name) });\r\n        });\r\n    }\r\n\r\n    function createKeySession(initData, protData, sessionType) {\r\n        if (!keySystem || !mediaKeys) {\r\n            throw new Error('Can not create sessions until you have selected a key system');\r\n        }\r\n\r\n        const session = mediaKeys.createSession(sessionType);\r\n        const sessionToken = createSessionToken(session, initData, sessionType);\r\n        const ks = this.getKeySystem();\r\n\r\n        // Generate initial key request.\r\n        // keyids type is used for clearkey when keys are provided directly in the protection data and then request to a license server is not needed\r\n        const dataType = ks.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING && (initData || (protData && protData.clearkeys)) ? 'keyids' : 'cenc';\r\n        session.generateRequest(dataType, initData).then(function () {\r\n            logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\r\n            eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\r\n        }).catch(function (error) {\r\n            // TODO: Better error string\r\n            removeSession(sessionToken);\r\n            eventBus.trigger(events.KEY_SESSION_CREATED, {\r\n                data: null,\r\n                error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Error generating key request -- ' + error.name)\r\n            });\r\n        });\r\n    }\r\n\r\n    function updateKeySession(sessionToken, message) {\r\n        const session = sessionToken.session;\r\n\r\n        // Send our request to the key session\r\n        if (protectionKeyController.isClearKey(keySystem)) {\r\n            message = message.toJWK();\r\n        }\r\n        session.update(message)\r\n            .then(() => {\r\n                eventBus.trigger(events.KEY_SESSION_UPDATED);\r\n            })\r\n            .catch(function (error) {\r\n                eventBus.trigger(events.KEY_ERROR, {error: new DashJSError(ProtectionErrors.MEDIA_KEYERR_CODE, 'Error sending update() message! ' + error.name, sessionToken)});\r\n            });\r\n    }\r\n\r\n    function loadKeySession(sessionID, initData, sessionType) {\r\n        if (!keySystem || !mediaKeys) {\r\n            throw new Error('Can not load sessions until you have selected a key system');\r\n        }\r\n\r\n        // Check if session Id is not already loaded or loading\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            if (sessionID === sessions[i].sessionId) {\r\n                logger.warn('DRM: Ignoring session ID because we have already seen it!');\r\n                return;\r\n            }\r\n        }\r\n\r\n        const session = mediaKeys.createSession(sessionType);\r\n        const sessionToken = createSessionToken(session, initData, sessionType, sessionID);\r\n\r\n        // Load persisted session data into our newly created session object\r\n        session.load(sessionID).then(function (success) {\r\n            if (success) {\r\n                logger.debug('DRM: Session loaded.  SessionID = ' + sessionToken.getSessionID());\r\n                eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\r\n            } else {\r\n                removeSession(sessionToken);\r\n                eventBus.trigger(events.KEY_SESSION_CREATED, {\r\n                    data: null,\r\n                    error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session! Invalid Session ID (' + sessionID + ')')\r\n                });\r\n            }\r\n        }).catch(function (error) {\r\n            removeSession(sessionToken);\r\n            eventBus.trigger(events.KEY_SESSION_CREATED, {\r\n                data: null,\r\n                error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session (' + sessionID + ')! ' + error.name)\r\n            });\r\n        });\r\n    }\r\n\r\n    function removeKeySession(sessionToken) {\r\n        const session = sessionToken.session;\r\n\r\n        session.remove().then(function () {\r\n            logger.debug('DRM: Session removed.  SessionID = ' + sessionToken.getSessionID());\r\n            eventBus.trigger(events.KEY_SESSION_REMOVED, { data: sessionToken.getSessionID() });\r\n        }, function (error) {\r\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {\r\n                data: null,\r\n                error: 'Error removing session (' + sessionToken.getSessionID() + '). ' + error.name\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    function closeKeySession(sessionToken) {\r\n        // Send our request to the key session\r\n        closeKeySessionInternal(sessionToken).catch(function (error) {\r\n            removeSession(sessionToken);\r\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {\r\n                data: null,\r\n                error: 'Error closing session (' + sessionToken.getSessionID() + ') ' + error.name\r\n            });\r\n        });\r\n    }\r\n\r\n    function requestKeySystemAccessInternal(ksConfigurations, idx) {\r\n\r\n        if (navigator.requestMediaKeySystemAccess === undefined ||\r\n            typeof navigator.requestMediaKeySystemAccess !== 'function') {\r\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Insecure origins are not allowed' });\r\n            return;\r\n        }\r\n\r\n        (function (i) {\r\n            const keySystem = ksConfigurations[i].ks;\r\n            const configs = ksConfigurations[i].configs;\r\n            let systemString = keySystem.systemString;\r\n\r\n            // PATCH to support persistent licenses on Edge browser (see issue #2658)\r\n            if (systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING && configs[0].persistentState === 'required') {\r\n                systemString += '.recommendation';\r\n            }\r\n\r\n            navigator.requestMediaKeySystemAccess(systemString, configs).then(function (mediaKeySystemAccess) {\r\n                // Chrome 40 does not currently implement MediaKeySystemAccess.getConfiguration()\r\n                const configuration = (typeof mediaKeySystemAccess.getConfiguration === 'function') ?\r\n                    mediaKeySystemAccess.getConfiguration() : null;\r\n                const keySystemAccess = new KeySystemAccess(keySystem, configuration);\r\n                keySystemAccess.mksa = mediaKeySystemAccess;\r\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: keySystemAccess });\r\n\r\n            }).catch(function (error) {\r\n                if (++i < ksConfigurations.length) {\r\n                    requestKeySystemAccessInternal(ksConfigurations, i);\r\n                } else {\r\n                    eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! ' + error.message });\r\n                }\r\n            });\r\n        })(idx);\r\n    }\r\n\r\n    function closeKeySessionInternal(sessionToken) {\r\n        const session = sessionToken.session;\r\n\r\n        // Remove event listeners\r\n        session.removeEventListener('keystatuseschange', sessionToken);\r\n        session.removeEventListener('message', sessionToken);\r\n\r\n        // Send our request to the key session\r\n        return session.close();\r\n    }\r\n\r\n    // This is our main event handler for all desired HTMLMediaElement events\r\n    // related to EME.  These events are translated into our API-independent\r\n    // versions of the same events\r\n    function createEventHandler() {\r\n        return {\r\n            handleEvent: function (event) {\r\n                switch (event.type) {\r\n                    case 'encrypted':\r\n                        if (event.initData) {\r\n                            let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\r\n                            eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, event.initDataType) });\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    function removeSession(token) {\r\n        // Remove from our session list\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            if (sessions[i] === token) {\r\n                sessions.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function parseKeyStatus(args) {\r\n        // Edge and Chrome implement different version of keystatues, param are not on same order\r\n        let status, keyId;\r\n        if (args && args.length > 0) {\r\n            if (args[0]) {\r\n                if (typeof args[0] === 'string') {\r\n                    status = args[0];\r\n                } else {\r\n                    keyId = args[0];\r\n                }\r\n            }\r\n\r\n            if (args[1]) {\r\n                if (typeof args[1] === 'string') {\r\n                    status = args[1];\r\n                } else {\r\n                    keyId = args[1];\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            status: status,\r\n            keyId: keyId\r\n        };\r\n    }\r\n\r\n    // Function to create our session token objects which manage the EME\r\n    // MediaKeySession and session-specific event handler\r\n    function createSessionToken(session, initData, sessionType, sessionID) {\r\n        const token = { // Implements SessionToken\r\n            session: session,\r\n            initData: initData,\r\n            sessionId: sessionID,\r\n\r\n            // This is our main event handler for all desired MediaKeySession events\r\n            // These events are translated into our API-independent versions of the\r\n            // same events\r\n            handleEvent: function (event) {\r\n                switch (event.type) {\r\n                    case 'keystatuseschange':\r\n                        eventBus.trigger(events.KEY_STATUSES_CHANGED, { data: this });\r\n                        event.target.keyStatuses.forEach(function () {\r\n                            let keyStatus = parseKeyStatus(arguments);\r\n                            switch (keyStatus.status) {\r\n                                case 'expired':\r\n                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, { error: new DashJSError(ProtectionErrors.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE, ProtectionErrors.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE) });\r\n                                    break;\r\n                                default:\r\n                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, keyStatus);\r\n                                    break;\r\n                            }\r\n                        });\r\n                        break;\r\n\r\n                    case 'message':\r\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\r\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(this, message, undefined, event.messageType) });\r\n                        break;\r\n                }\r\n            },\r\n\r\n            getSessionID: function () {\r\n                return session.sessionId;\r\n            },\r\n\r\n            getExpirationTime: function () {\r\n                return session.expiration;\r\n            },\r\n\r\n            getKeyStatuses: function () {\r\n                return session.keyStatuses;\r\n            },\r\n\r\n            getUsable: function () {\r\n                let usable = false;\r\n                session.keyStatuses.forEach(function () {\r\n                    let keyStatus = parseKeyStatus(arguments);\r\n                    if (keyStatus.status === 'usable') {\r\n                        usable = true;\r\n                    }\r\n                });\r\n                return usable;\r\n            },\r\n\r\n            getSessionType: function () {\r\n                return sessionType;\r\n            }\r\n        };\r\n\r\n        // Add all event listeners\r\n        session.addEventListener('keystatuseschange', token);\r\n        session.addEventListener('message', token);\r\n\r\n        // Register callback for session closed Promise\r\n        session.closed.then(function () {\r\n            removeSession(token);\r\n            logger.debug('DRM: Session closed.  SessionID = ' + token.getSessionID());\r\n            eventBus.trigger(events.KEY_SESSION_CLOSED, { data: token.getSessionID() });\r\n        });\r\n\r\n        // Add to our session list\r\n        sessions.push(token);\r\n\r\n        return token;\r\n    }\r\n\r\n    instance = {\r\n        getAllInitData: getAllInitData,\r\n        requestKeySystemAccess: requestKeySystemAccess,\r\n        getKeySystem: getKeySystem,\r\n        selectKeySystem: selectKeySystem,\r\n        setMediaElement: setMediaElement,\r\n        setServerCertificate: setServerCertificate,\r\n        createKeySession: createKeySession,\r\n        updateKeySession: updateKeySession,\r\n        loadKeySession: loadKeySession,\r\n        removeKeySession: removeKeySession,\r\n        closeKeySession: closeKeySession,\r\n        stop: stop,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nProtectionModel_21Jan2015.__dashjs_factory_name = 'ProtectionModel_21Jan2015';\r\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_21Jan2015); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Implementation of the EME APIs as of the 3 Feb 2014 state of the specification.\r\n *\r\n * Implemented by Internet Explorer 11 (Windows 8.1)\r\n *\r\n * @implements ProtectionModel\r\n * @class\r\n */\r\n\r\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\r\nimport NeedKey from '../vo/NeedKey';\r\nimport DashJSError from '../../vo/DashJSError';\r\nimport ProtectionErrors from '../errors/ProtectionErrors';\r\nimport KeyMessage from '../vo/KeyMessage';\r\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\r\nimport KeySystemAccess from '../vo/KeySystemAccess';\r\n\r\nfunction ProtectionModel_3Feb2014(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\r\n    const events = config.events;\r\n    const debug = config.debug;\r\n    const api = config.api;\r\n\r\n    let instance,\r\n        logger,\r\n        videoElement,\r\n        keySystem,\r\n        mediaKeys,\r\n        keySystemAccess,\r\n        sessions,\r\n        eventHandler,\r\n        protectionKeyController;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        videoElement = null;\r\n        keySystem = null;\r\n        mediaKeys = null;\r\n        keySystemAccess = null;\r\n        sessions = [];\r\n        protectionKeyController = ProtectionKeyController(context).getInstance();\r\n        eventHandler = createEventHandler();\r\n    }\r\n\r\n    function reset() {\r\n        try {\r\n            for (let i = 0; i < sessions.length; i++) {\r\n                closeKeySession(sessions[i]);\r\n            }\r\n            if (videoElement) {\r\n                videoElement.removeEventListener(api.needkey, eventHandler);\r\n            }\r\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\r\n        } catch (error) {\r\n            eventBus.trigger(events.TEARDOWN_COMPLETE, { error: 'Error tearing down key sessions and MediaKeys! -- ' + error.message });\r\n        }\r\n    }\r\n\r\n    function getKeySystem() {\r\n        return keySystem;\r\n    }\r\n\r\n    function getAllInitData() {\r\n        const retVal = [];\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            retVal.push(sessions[i].initData);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    function requestKeySystemAccess(ksConfigurations) {\r\n\r\n        // Try key systems in order, first one with supported key system configuration\r\n        // is used\r\n        let found = false;\r\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\r\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\r\n            const configs = ksConfigurations[ksIdx].configs;\r\n            let supportedAudio = null;\r\n            let supportedVideo = null;\r\n\r\n            // Try key system configs in order, first one with supported audio/video\r\n            // is used\r\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\r\n                const audios = configs[configIdx].audioCapabilities;\r\n                const videos = configs[configIdx].videoCapabilities;\r\n\r\n                // Look for supported audio container/codecs\r\n                if (audios && audios.length !== 0) {\r\n                    supportedAudio = []; // Indicates that we have a requested audio config\r\n                    for (let audioIdx = 0; audioIdx < audios.length; audioIdx++) {\r\n                        if (window[api.MediaKeys].isTypeSupported(systemString, audios[audioIdx].contentType)) {\r\n                            supportedAudio.push(audios[audioIdx]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Look for supported video container/codecs\r\n                if (videos && videos.length !== 0) {\r\n                    supportedVideo = []; // Indicates that we have a requested video config\r\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\r\n                        if (window[api.MediaKeys].isTypeSupported(systemString, videos[videoIdx].contentType)) {\r\n                            supportedVideo.push(videos[videoIdx]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // No supported audio or video in this configuration OR we have\r\n                // requested audio or video configuration that is not supported\r\n                if ((!supportedAudio && !supportedVideo) ||\r\n                    (supportedAudio && supportedAudio.length === 0) ||\r\n                    (supportedVideo && supportedVideo.length === 0)) {\r\n                    continue;\r\n                }\r\n\r\n                // This configuration is supported\r\n                found = true;\r\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\r\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\r\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\r\n                break;\r\n            }\r\n        }\r\n        if (!found) {\r\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! -- No valid audio/video content configurations detected!' });\r\n        }\r\n    }\r\n\r\n    function selectKeySystem(ksAccess) {\r\n        try {\r\n            mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString);\r\n            keySystem = ksAccess.keySystem;\r\n            keySystemAccess = ksAccess;\r\n            if (videoElement) {\r\n                setMediaKeys();\r\n            }\r\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\r\n        } catch (error) {\r\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, { error: 'Error selecting keys system (' + keySystem.systemString + ')! Could not create MediaKeys -- TODO' });\r\n        }\r\n    }\r\n\r\n    function setMediaElement(mediaElement) {\r\n        if (videoElement === mediaElement)\r\n            return;\r\n\r\n        // Replacing the previous element\r\n        if (videoElement) {\r\n            videoElement.removeEventListener(api.needkey, eventHandler);\r\n        }\r\n\r\n        videoElement = mediaElement;\r\n\r\n        // Only if we are not detaching from the existing element\r\n        if (videoElement) {\r\n            videoElement.addEventListener(api.needkey, eventHandler);\r\n            if (mediaKeys) {\r\n                setMediaKeys();\r\n            }\r\n        }\r\n    }\r\n\r\n    function createKeySession(initData, protData, sessionType, cdmData) {\r\n        if (!keySystem || !mediaKeys || !keySystemAccess) {\r\n            throw new Error('Can not create sessions until you have selected a key system');\r\n        }\r\n\r\n        // Use the first video capability for the contentType.\r\n        // TODO:  Not sure if there is a way to concatenate all capability data into a RFC6386-compatible format\r\n\r\n        // If player is trying to playback Audio only stream - don't error out.\r\n        let capabilities = null;\r\n\r\n        if (keySystemAccess.ksConfiguration.videoCapabilities && keySystemAccess.ksConfiguration.videoCapabilities.length > 0) {\r\n            capabilities = keySystemAccess.ksConfiguration.videoCapabilities[0];\r\n        }\r\n\r\n        if (capabilities === null && keySystemAccess.ksConfiguration.audioCapabilities && keySystemAccess.ksConfiguration.audioCapabilities.length > 0) {\r\n            capabilities = keySystemAccess.ksConfiguration.audioCapabilities[0];\r\n        }\r\n\r\n        if (capabilities === null) {\r\n            throw new Error('Can not create sessions for unknown content types.');\r\n        }\r\n\r\n        const contentType = capabilities.contentType;\r\n        const session = mediaKeys.createSession(contentType, new Uint8Array(initData), cdmData ? new Uint8Array(cdmData) : null);\r\n        const sessionToken = createSessionToken(session, initData);\r\n\r\n        // Add all event listeners\r\n        session.addEventListener(api.error, sessionToken);\r\n        session.addEventListener(api.message, sessionToken);\r\n        session.addEventListener(api.ready, sessionToken);\r\n        session.addEventListener(api.close, sessionToken);\r\n\r\n        // Add to our session list\r\n        sessions.push(sessionToken);\r\n        logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\r\n        eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\r\n    }\r\n\r\n    function updateKeySession(sessionToken, message) {\r\n        const session = sessionToken.session;\r\n\r\n        if (!protectionKeyController.isClearKey(keySystem)) {\r\n            // Send our request to the key session\r\n            session.update(new Uint8Array(message));\r\n        } else {\r\n            // For clearkey, message is a ClearKeyKeySet\r\n            session.update(new Uint8Array(message.toJWK()));\r\n        }\r\n        eventBus.trigger(events.KEY_SESSION_UPDATED);\r\n    }\r\n\r\n    /**\r\n     * Close the given session and release all associated keys.  Following\r\n     * this call, the sessionToken becomes invalid\r\n     *\r\n     * @param {Object} sessionToken - the session token\r\n     */\r\n    function closeKeySession(sessionToken) {\r\n        const session = sessionToken.session;\r\n\r\n        // Remove event listeners\r\n        session.removeEventListener(api.error, sessionToken);\r\n        session.removeEventListener(api.message, sessionToken);\r\n        session.removeEventListener(api.ready, sessionToken);\r\n        session.removeEventListener(api.close, sessionToken);\r\n\r\n        // Remove from our session list\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            if (sessions[i] === sessionToken) {\r\n                sessions.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Send our request to the key session\r\n        session[api.release]();\r\n    }\r\n\r\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\r\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\r\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\r\n\r\n\r\n    function createEventHandler() {\r\n        return {\r\n            handleEvent: function (event) {\r\n                switch (event.type) {\r\n\r\n                    case api.needkey:\r\n                        if (event.initData) {\r\n                            const initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\r\n                            eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, 'cenc') });\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    // IE11 does not let you set MediaKeys until it has entered a certain\r\n    // readyState, so we need this logic to ensure we don't set the keys\r\n    // too early\r\n    function setMediaKeys() {\r\n        let boundDoSetKeys = null;\r\n        const doSetKeys = function () {\r\n            videoElement.removeEventListener('loadedmetadata', boundDoSetKeys);\r\n            videoElement[api.setMediaKeys](mediaKeys);\r\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\r\n        };\r\n        if (videoElement.readyState >= 1) {\r\n            doSetKeys();\r\n        } else {\r\n            boundDoSetKeys = doSetKeys.bind(this);\r\n            videoElement.addEventListener('loadedmetadata', boundDoSetKeys);\r\n        }\r\n\r\n    }\r\n\r\n    // Function to create our session token objects which manage the EME\r\n    // MediaKeySession and session-specific event handler\r\n    function createSessionToken(keySession, initData) {\r\n        return {\r\n            // Implements SessionToken\r\n            session: keySession,\r\n            initData: initData,\r\n\r\n            getSessionID: function () {\r\n                return this.session.sessionId;\r\n            },\r\n\r\n            getExpirationTime: function () {\r\n                return NaN;\r\n            },\r\n\r\n            getSessionType: function () {\r\n                return 'temporary';\r\n            },\r\n            // This is our main event handler for all desired MediaKeySession events\r\n            // These events are translated into our API-independent versions of the\r\n            // same events\r\n            handleEvent: function (event) {\r\n                switch (event.type) {\r\n                    case api.error:\r\n                        let errorStr = 'KeyError'; // TODO: Make better string from event\r\n                        eventBus.trigger(events.KEY_ERROR, { error: new DashJSError(ProtectionErrors.MEDIA_KEYERR_CODE, errorStr, this) });\r\n                        break;\r\n                    case api.message:\r\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\r\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(this, message, event.destinationURL) });\r\n                        break;\r\n                    case api.ready:\r\n                        logger.debug('DRM: Key added.');\r\n                        eventBus.trigger(events.KEY_ADDED);\r\n                        break;\r\n\r\n                    case api.close:\r\n                        logger.debug('DRM: Session closed.  SessionID = ' + this.getSessionID());\r\n                        eventBus.trigger(events.KEY_SESSION_CLOSED, { data: this.getSessionID() });\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    instance = {\r\n        getAllInitData: getAllInitData,\r\n        requestKeySystemAccess: requestKeySystemAccess,\r\n        getKeySystem: getKeySystem,\r\n        selectKeySystem: selectKeySystem,\r\n        setMediaElement: setMediaElement,\r\n        createKeySession: createKeySession,\r\n        updateKeySession: updateKeySession,\r\n        closeKeySession: closeKeySession,\r\n        setServerCertificate: setServerCertificate,\r\n        loadKeySession: loadKeySession,\r\n        removeKeySession: removeKeySession,\r\n        stop: reset,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nProtectionModel_3Feb2014.__dashjs_factory_name = 'ProtectionModel_3Feb2014';\r\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_3Feb2014); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Initial implementation of EME\r\n *\r\n * Implemented by Google Chrome prior to v36\r\n *\r\n * @implements ProtectionModel\r\n * @class\r\n */\r\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\r\nimport NeedKey from '../vo/NeedKey';\r\nimport DashJSError from '../../vo/DashJSError';\r\nimport KeyMessage from '../vo/KeyMessage';\r\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\r\nimport KeySystemAccess from '../vo/KeySystemAccess';\r\nimport ProtectionErrors from '../errors/ProtectionErrors';\r\n\r\nfunction ProtectionModel_01b(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\r\n    const events = config.events;\r\n    const debug = config.debug;\r\n    const api = config.api;\r\n    const errHandler = config.errHandler;\r\n\r\n    let instance,\r\n        logger,\r\n        videoElement,\r\n        keySystem,\r\n        protectionKeyController,\r\n\r\n        // With this version of the EME APIs, sessionIDs are not assigned to\r\n        // sessions until the first key message is received.  We are assuming\r\n        // that in the case of multiple sessions, key messages will be received\r\n        // in the order that generateKeyRequest() is called.\r\n        // Holding spot for newly-created sessions until we determine whether or\r\n        // not the CDM supports sessionIDs\r\n        pendingSessions,\r\n\r\n        // List of sessions that have been initialized.  Only the first position will\r\n        // be used in the case that the CDM does not support sessionIDs\r\n        sessions,\r\n\r\n        // Not all CDMs support the notion of sessionIDs.  Without sessionIDs\r\n        // there is no way for us to differentiate between sessions, therefore\r\n        // we must only allow a single session.  Once we receive the first key\r\n        // message we can set this flag to determine if more sessions are allowed\r\n        moreSessionsAllowed,\r\n\r\n        // This is our main event handler for all desired HTMLMediaElement events\r\n        // related to EME.  These events are translated into our API-independent\r\n        // versions of the same events\r\n        eventHandler;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        videoElement = null;\r\n        keySystem = null;\r\n        pendingSessions = [];\r\n        sessions = [];\r\n        protectionKeyController = ProtectionKeyController(context).getInstance();\r\n        eventHandler = createEventHandler();\r\n    }\r\n\r\n    function reset() {\r\n        if (videoElement) {\r\n            removeEventListeners();\r\n        }\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            closeKeySession(sessions[i]);\r\n        }\r\n        eventBus.trigger(events.TEARDOWN_COMPLETE);\r\n    }\r\n\r\n    function getKeySystem() {\r\n        return keySystem;\r\n    }\r\n\r\n    function getAllInitData() {\r\n        const retVal = [];\r\n        for (let i = 0; i < pendingSessions.length; i++) {\r\n            retVal.push(pendingSessions[i].initData);\r\n        }\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            retVal.push(sessions[i].initData);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    function requestKeySystemAccess(ksConfigurations) {\r\n        let ve = videoElement;\r\n        if (!ve) { // Must have a video element to do this capability tests\r\n            ve = document.createElement('video');\r\n        }\r\n\r\n        // Try key systems in order, first one with supported key system configuration\r\n        // is used\r\n        let found = false;\r\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\r\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\r\n            const configs = ksConfigurations[ksIdx].configs;\r\n            let supportedAudio = null;\r\n            let supportedVideo = null;\r\n\r\n            // Try key system configs in order, first one with supported audio/video\r\n            // is used\r\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\r\n                //let audios = configs[configIdx].audioCapabilities;\r\n                const videos = configs[configIdx].videoCapabilities;\r\n                // Look for supported video container/codecs\r\n                if (videos && videos.length !== 0) {\r\n                    supportedVideo = []; // Indicates that we have a requested video config\r\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\r\n                        if (ve.canPlayType(videos[videoIdx].contentType, systemString) !== '') {\r\n                            supportedVideo.push(videos[videoIdx]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // No supported audio or video in this configuration OR we have\r\n                // requested audio or video configuration that is not supported\r\n                if ((!supportedAudio && !supportedVideo) ||\r\n                    (supportedAudio && supportedAudio.length === 0) ||\r\n                    (supportedVideo && supportedVideo.length === 0)) {\r\n                    continue;\r\n                }\r\n\r\n                // This configuration is supported\r\n                found = true;\r\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\r\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\r\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\r\n                break;\r\n            }\r\n        }\r\n        if (!found) {\r\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! -- No valid audio/video content configurations detected!' });\r\n        }\r\n    }\r\n\r\n    function selectKeySystem(keySystemAccess) {\r\n        keySystem = keySystemAccess.keySystem;\r\n        eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\r\n    }\r\n\r\n    function setMediaElement(mediaElement) {\r\n        if (videoElement === mediaElement) {\r\n            return;\r\n        }\r\n\r\n        // Replacing the previous element\r\n        if (videoElement) {\r\n            removeEventListeners();\r\n\r\n            // Close any open sessions - avoids memory leak on LG webOS 2016/2017 TVs\r\n            for (var i = 0; i < sessions.length; i++) {\r\n                closeKeySession(sessions[i]);\r\n            }\r\n            sessions = [];\r\n        }\r\n\r\n        videoElement = mediaElement;\r\n\r\n        // Only if we are not detaching from the existing element\r\n        if (videoElement) {\r\n            videoElement.addEventListener(api.keyerror, eventHandler);\r\n            videoElement.addEventListener(api.needkey, eventHandler);\r\n            videoElement.addEventListener(api.keymessage, eventHandler);\r\n            videoElement.addEventListener(api.keyadded, eventHandler);\r\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\r\n        }\r\n    }\r\n\r\n    function createKeySession(initData /*, protData, keySystemType */) {\r\n        if (!keySystem) {\r\n            throw new Error('Can not create sessions until you have selected a key system');\r\n        }\r\n\r\n        // Determine if creating a new session is allowed\r\n        if (moreSessionsAllowed || sessions.length === 0) {\r\n            const newSession = { // Implements SessionToken\r\n                sessionID: null,\r\n                initData: initData,\r\n                getSessionID: function () {\r\n                    return this.sessionID;\r\n                },\r\n\r\n                getExpirationTime: function () {\r\n                    return NaN;\r\n                },\r\n\r\n                getSessionType: function () {\r\n                    return 'temporary';\r\n                }\r\n            };\r\n            pendingSessions.push(newSession);\r\n\r\n            // Send our request to the CDM\r\n            videoElement[api.generateKeyRequest](keySystem.systemString, new Uint8Array(initData));\r\n\r\n            return newSession;\r\n\r\n        } else {\r\n            throw new Error('Multiple sessions not allowed!');\r\n        }\r\n\r\n    }\r\n\r\n    function updateKeySession(sessionToken, message) {\r\n        const sessionID = sessionToken.sessionID;\r\n        if (!protectionKeyController.isClearKey(keySystem)) {\r\n            // Send our request to the CDM\r\n            videoElement[api.addKey](keySystem.systemString,\r\n                new Uint8Array(message), new Uint8Array(sessionToken.initData), sessionID);\r\n        } else {\r\n            // For clearkey, message is a ClearKeyKeySet\r\n            for (let i = 0; i < message.keyPairs.length; i++) {\r\n                videoElement[api.addKey](keySystem.systemString,\r\n                    message.keyPairs[i].key, message.keyPairs[i].keyID, sessionID);\r\n            }\r\n        }\r\n        eventBus.trigger(events.KEY_SESSION_UPDATED);\r\n    }\r\n\r\n    function closeKeySession(sessionToken) {\r\n        // Send our request to the CDM\r\n        try {\r\n            videoElement[api.cancelKeyRequest](keySystem.systemString, sessionToken.sessionID);\r\n        } catch (error) {\r\n            eventBus.trigger(events.KEY_SESSION_CLOSED, { data: null, error: 'Error closing session (' + sessionToken.sessionID + ') ' + error.message });\r\n        }\r\n    }\r\n\r\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\r\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\r\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\r\n\r\n    function createEventHandler() {\r\n        return {\r\n            handleEvent: function (event) {\r\n                let sessionToken = null;\r\n                switch (event.type) {\r\n                    case api.needkey:\r\n                        let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\r\n                        eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, 'cenc') });\r\n                        break;\r\n\r\n                    case api.keyerror:\r\n                        sessionToken = findSessionByID(sessions, event.sessionId);\r\n                        if (!sessionToken) {\r\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\r\n                        }\r\n\r\n                        if (sessionToken) {\r\n                            let code = ProtectionErrors.MEDIA_KEYERR_CODE;\r\n                            let msg = '';\r\n                            switch (event.errorCode.code) {\r\n                                case 1:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_UNKNOWN_CODE;\r\n                                    msg += 'MEDIA_KEYERR_UNKNOWN - ' + ProtectionErrors.MEDIA_KEYERR_UNKNOWN_MESSAGE;\r\n                                    break;\r\n                                case 2:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_CLIENT_CODE;\r\n                                    msg += 'MEDIA_KEYERR_CLIENT - ' + ProtectionErrors.MEDIA_KEYERR_CLIENT_MESSAGE;\r\n                                    break;\r\n                                case 3:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_SERVICE_CODE;\r\n                                    msg += 'MEDIA_KEYERR_SERVICE - ' + ProtectionErrors.MEDIA_KEYERR_SERVICE_MESSAGE;\r\n                                    break;\r\n                                case 4:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_OUTPUT_CODE;\r\n                                    msg += 'MEDIA_KEYERR_OUTPUT - ' + ProtectionErrors.MEDIA_KEYERR_OUTPUT_MESSAGE;\r\n                                    break;\r\n                                case 5:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_HARDWARECHANGE_CODE;\r\n                                    msg += 'MEDIA_KEYERR_HARDWARECHANGE - ' + ProtectionErrors.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE;\r\n                                    break;\r\n                                case 6:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_DOMAIN_CODE;\r\n                                    msg += 'MEDIA_KEYERR_DOMAIN - ' + ProtectionErrors.MEDIA_KEYERR_DOMAIN_MESSAGE;\r\n                                    break;\r\n                            }\r\n                            msg += '  System Code = ' + event.systemCode;\r\n                            // TODO: Build error string based on key error\r\n                            eventBus.trigger(events.KEY_ERROR, { error: new DashJSError(code, msg, sessionToken) });\r\n                        } else {\r\n                            logger.error('No session token found for key error');\r\n                        }\r\n                        break;\r\n\r\n                    case api.keyadded:\r\n                        sessionToken = findSessionByID(sessions, event.sessionId);\r\n                        if (!sessionToken) {\r\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\r\n                        }\r\n\r\n                        if (sessionToken) {\r\n                            logger.debug('DRM: Key added.');\r\n                            eventBus.trigger(events.KEY_ADDED, { data: sessionToken });//TODO not sure anything is using sessionToken? why there?\r\n                        } else {\r\n                            logger.debug('No session token found for key added');\r\n                        }\r\n                        break;\r\n\r\n                    case api.keymessage:\r\n                        // If this CDM does not support session IDs, we will be limited\r\n                        // to a single session\r\n                        moreSessionsAllowed = (event.sessionId !== null) && (event.sessionId !== undefined);\r\n\r\n                        // SessionIDs supported\r\n                        if (moreSessionsAllowed) {\r\n                            // Attempt to find an uninitialized token with this sessionID\r\n                            sessionToken = findSessionByID(sessions, event.sessionId);\r\n                            if (!sessionToken && pendingSessions.length > 0) {\r\n\r\n                                // This is the first message for our latest session, so set the\r\n                                // sessionID and add it to our list\r\n                                sessionToken = pendingSessions.shift();\r\n                                sessions.push(sessionToken);\r\n                                sessionToken.sessionID = event.sessionId;\r\n\r\n                                eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\r\n                            }\r\n                        } else if (pendingSessions.length > 0) { // SessionIDs not supported\r\n                            sessionToken = pendingSessions.shift();\r\n                            sessions.push(sessionToken);\r\n\r\n                            if (pendingSessions.length !== 0) {\r\n                                errHandler.error(new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_MESSAGE));\r\n                            }\r\n                        }\r\n\r\n                        if (sessionToken) {\r\n                            let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\r\n\r\n                            // For ClearKey, the spec mandates that you pass this message to the\r\n                            // addKey method, so we always save it to the token since there is no\r\n                            // way to tell which key system is in use\r\n                            sessionToken.keyMessage = message;\r\n                            eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(sessionToken, message, event.defaultURL) });\r\n\r\n                        } else {\r\n                            logger.warn('No session token found for key message');\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    /**\r\n     * Helper function to retrieve the stored session token based on a given\r\n     * sessionID value\r\n     *\r\n     * @param {Array} sessionArray - the array of sessions to search\r\n     * @param {*} sessionID - the sessionID to search for\r\n     * @returns {*} the session token with the given sessionID\r\n     */\r\n    function findSessionByID(sessionArray, sessionID) {\r\n        if (!sessionID || !sessionArray) {\r\n            return null;\r\n        } else {\r\n            const len = sessionArray.length;\r\n            for (let i = 0; i < len; i++) {\r\n                if (sessionArray[i].sessionID == sessionID) {\r\n                    return sessionArray[i];\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function removeEventListeners() {\r\n        videoElement.removeEventListener(api.keyerror, eventHandler);\r\n        videoElement.removeEventListener(api.needkey, eventHandler);\r\n        videoElement.removeEventListener(api.keymessage, eventHandler);\r\n        videoElement.removeEventListener(api.keyadded, eventHandler);\r\n    }\r\n\r\n    instance = {\r\n        getAllInitData: getAllInitData,\r\n        requestKeySystemAccess: requestKeySystemAccess,\r\n        getKeySystem: getKeySystem,\r\n        selectKeySystem: selectKeySystem,\r\n        setMediaElement: setMediaElement,\r\n        createKeySession: createKeySession,\r\n        updateKeySession: updateKeySession,\r\n        closeKeySession: closeKeySession,\r\n        setServerCertificate: setServerCertificate,\r\n        loadKeySession: loadKeySession,\r\n        removeKeySession: removeKeySession,\r\n        stop: reset,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nProtectionModel_01b.__dashjs_factory_name = 'ProtectionModel_01b';\r\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_01b); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport ProtectionController from './controllers/ProtectionController';\r\nimport ProtectionKeyController from './controllers/ProtectionKeyController';\r\nimport ProtectionEvents from './ProtectionEvents';\r\nimport ProtectionErrors from './errors/ProtectionErrors';\r\nimport ProtectionModel_21Jan2015 from './models/ProtectionModel_21Jan2015';\r\nimport ProtectionModel_3Feb2014 from './models/ProtectionModel_3Feb2014';\r\nimport ProtectionModel_01b from './models/ProtectionModel_01b';\r\n\r\nconst APIS_ProtectionModel_01b = [\r\n    // Un-prefixed as per spec\r\n    {\r\n        // Video Element\r\n        generateKeyRequest: 'generateKeyRequest',\r\n        addKey: 'addKey',\r\n        cancelKeyRequest: 'cancelKeyRequest',\r\n\r\n        // Events\r\n        needkey: 'needkey',\r\n        keyerror: 'keyerror',\r\n        keyadded: 'keyadded',\r\n        keymessage: 'keymessage'\r\n    },\r\n    // Webkit-prefixed (early Chrome versions and Chrome with EME disabled in chrome://flags)\r\n    {\r\n        // Video Element\r\n        generateKeyRequest: 'webkitGenerateKeyRequest',\r\n        addKey: 'webkitAddKey',\r\n        cancelKeyRequest: 'webkitCancelKeyRequest',\r\n\r\n        // Events\r\n        needkey: 'webkitneedkey',\r\n        keyerror: 'webkitkeyerror',\r\n        keyadded: 'webkitkeyadded',\r\n        keymessage: 'webkitkeymessage'\r\n    }\r\n];\r\n\r\nconst APIS_ProtectionModel_3Feb2014 = [\r\n    // Un-prefixed as per spec\r\n    // Chrome 38-39 (and some earlier versions) with chrome://flags -- Enable Encrypted Media Extensions\r\n    {\r\n        // Video Element\r\n        setMediaKeys: 'setMediaKeys',\r\n        // MediaKeys\r\n        MediaKeys: 'MediaKeys',\r\n        // MediaKeySession\r\n        release: 'close',\r\n\r\n        // Events\r\n        needkey: 'needkey',\r\n        error: 'keyerror',\r\n        message: 'keymessage',\r\n        ready: 'keyadded',\r\n        close: 'keyclose'\r\n    },\r\n    // MS-prefixed (IE11, Windows 8.1)\r\n    {\r\n        // Video Element\r\n        setMediaKeys: 'msSetMediaKeys',\r\n        // MediaKeys\r\n        MediaKeys: 'MSMediaKeys',\r\n        // MediaKeySession\r\n        release: 'close',\r\n        // Events\r\n        needkey: 'msneedkey',\r\n        error: 'mskeyerror',\r\n        message: 'mskeymessage',\r\n        ready: 'mskeyadded',\r\n        close: 'mskeyclose'\r\n    }\r\n];\r\n\r\nfunction Protection() {\r\n    let instance;\r\n    const context = this.context;\r\n\r\n    /**\r\n     * Create a ProtectionController and associated ProtectionModel for use with\r\n     * a single piece of content.\r\n     *\r\n     * @param {Object} config\r\n     * @return {ProtectionController} protection controller\r\n     *\r\n     */\r\n    function createProtectionSystem(config) {\r\n        let controller = null;\r\n\r\n        const protectionKeyController = ProtectionKeyController(context).getInstance();\r\n        protectionKeyController.setConfig({ debug: config.debug, BASE64: config.BASE64 });\r\n        protectionKeyController.initialize();\r\n\r\n        let protectionModel =  getProtectionModel(config);\r\n\r\n        if (!controller && protectionModel) {//TODO add ability to set external controller if still needed at all?\r\n            controller = ProtectionController(context).create({\r\n                protectionModel: protectionModel,\r\n                protectionKeyController: protectionKeyController,\r\n                eventBus: config.eventBus,\r\n                debug: config.debug,\r\n                events: config.events,\r\n                BASE64: config.BASE64,\r\n                constants: config.constants,\r\n                cmcdModel: config.cmcdModel,\r\n                settings: config.settings\r\n            });\r\n            config.capabilities.setEncryptedMediaSupported(true);\r\n        }\r\n        return controller;\r\n    }\r\n\r\n    function getProtectionModel(config) {\r\n        const debug = config.debug;\r\n        const logger = debug.getLogger(instance);\r\n        const eventBus = config.eventBus;\r\n        const errHandler = config.errHandler;\r\n        const videoElement = config.videoModel ? config.videoModel.getElement() : null;\r\n\r\n        if ((!videoElement || videoElement.onencrypted !== undefined) &&\r\n            (!videoElement || videoElement.mediaKeys !== undefined)) {\r\n            logger.info('EME detected on this user agent! (ProtectionModel_21Jan2015)');\r\n            return ProtectionModel_21Jan2015(context).create({ debug: debug, eventBus: eventBus, events: config.events });\r\n        } else if (getAPI(videoElement, APIS_ProtectionModel_3Feb2014)) {\r\n            logger.info('EME detected on this user agent! (ProtectionModel_3Feb2014)');\r\n            return ProtectionModel_3Feb2014(context).create({ debug: debug, eventBus: eventBus, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_3Feb2014) });\r\n        } else if (getAPI(videoElement, APIS_ProtectionModel_01b)) {\r\n            logger.info('EME detected on this user agent! (ProtectionModel_01b)');\r\n            return ProtectionModel_01b(context).create({ debug: debug, eventBus: eventBus, errHandler: errHandler, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_01b) });\r\n        } else {\r\n            logger.warn('No supported version of EME detected on this user agent! - Attempts to play encrypted content will fail!');\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function getAPI(videoElement, apis) {\r\n        for (let i = 0; i < apis.length; i++) {\r\n            const api = apis[i];\r\n            // detect if api is supported by browser\r\n            // check only first function in api -> should be fine\r\n            if (typeof videoElement[api[Object.keys(api)[0]]] !== 'function') {\r\n                continue;\r\n            }\r\n\r\n            return api;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    instance = {\r\n        createProtectionSystem: createProtectionSystem\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nProtection.__dashjs_factory_name = 'Protection';\r\nconst factory = dashjs.FactoryMaker.getClassFactory(Protection); /* jshint ignore:line */\r\nfactory.events = ProtectionEvents;\r\nfactory.errors = ProtectionErrors;\r\ndashjs.FactoryMaker.updateClassFactory(Protection.__dashjs_factory_name, factory); /* jshint ignore:line */\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass DashJSError {\r\n    constructor(code, message, data) {\r\n        this.code = code || null;\r\n        this.message = message || null;\r\n        this.data = data || null;\r\n    }\r\n}\r\n\r\nexport default DashJSError;"],"sourceRoot":""}